/* Generated By:JJTree: Do not edit this line. ASTIf.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTIf extends SimpleNode {
  public ASTIf(int id) {
    super(id);
  }

  public ASTIf(Compiler p, int id) {
    super(p, id);
  }

  @Override
  public int process(String className) {

    SimpleNode child = (SimpleNode)this.children[0];
    // int left_val;
    // int right_val;
    child.process(className);

    for (int i = 1; i < this.children.length; i++) {
      ((SimpleNode)this.children[i]).process(className);
    }

    if (!child.getType().equals(Symbol.BOOLEAN)){
      throw new RuntimeException("ASTIf is not a Boolean" + "\nLine: " + this.line + "; Col: " + this.column);
    }
    
    return 1;
  }

  public String generateCode(String className){
    // System.out.println("CodeGenerator " + this.getClass() + " : SIMPLENODE");

    String code = "";
    String loop1 = "loop" + CodeGenerator.loopNumber++;
    String loop2 = "loop" + CodeGenerator.loopNumber++;
    ASTElse else_node = null;
    SimpleNode father = (SimpleNode)this.jjtGetParent();

    for(int i = 0; i < father.children.length; i++){
      if (father.children[i].equals(this)){
        else_node = (ASTElse) father.children[i + 1];
        break;
      }
    }
    
    //COMPARAÇÃO
    code += ((SimpleNode)this.children[0]).generateCode(className);
    code += "ifne " + loop1 + "\n";
    // ELSE CODE
    code += else_node.generateCode(className);

    // Skip if (loop2)
    code += "goto " + loop2 + "\n";

    code += loop1 + ":\n";
    //IF CODE
    
    code += ((SimpleNode)this.children[1]).generateCode(className);
    

    //IFNOT
    code += loop2 +":\n"; // end of if-else

    return code;
  }

}
/* JavaCC - OriginalChecksum=9b2b06fe1f37a5c88d35bf1701a179f5 (do not edit this line) */