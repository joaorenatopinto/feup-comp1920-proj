/* Generated By:JJTree: Do not edit this line. ASTMethod.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.*;
import java.io.*;

public
class ASTMethod extends SimpleNode {
  public String ast_id;
  public String ast_type;

  public HashMap<String, Symbol> symbols_table = new HashMap<String, Symbol>();  //TODO adicionar este method ao pai

  public ASTMethod(int id) {
    super(id);
  }

  public ASTMethod(Compiler p, int id) {
    super(p, id);
  }

  @Override
  public int process() { //TODO adicionar este method ao pai
    System.out.println(this.getClass());
    SimpleNode curr_node;
    for (int i = 0; i < this.children.length; i++) {
      curr_node = (SimpleNode)this.children[i];
      curr_node.process();
    }

    //  Check return type

    if (!((SimpleNode)this.children[this.children.length-1]).getType().equals(ast_type)){
      throw new RuntimeException("ASTMethod return type does not match (" + 
      ((SimpleNode)this.children[this.children.length-1]).getType() + ", " + ast_type + ")");
    }

    return 1;
  }

  public void preProcess(){
    List<Symbol> args = new ArrayList<>();

    for (int j = 0; j < ((SimpleNode)this.children[0]).children.length; j++) {
        ASTArg arg = (ASTArg)((SimpleNode)(this.children[0])).children[j];
        String type = arg.ast_type;
        String identifier = arg.ast_id;
        SymbolVar symbol = new SymbolVar(identifier, type);
        symbol.initialize();
        args.add(symbol);
    }

    putSymbolInTable(new SymbolMethod(ast_id, ast_type, args));
  }

  public String getNodeType() {
    return this.getClass().toString();
  }
  
}
/* JavaCC - OriginalChecksum=dee4677a4569967c602fa79e0250dbf5 (do not edit this line) */
