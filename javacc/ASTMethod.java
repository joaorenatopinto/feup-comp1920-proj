/* Generated By:JJTree: Do not edit this line. ASTMethod.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.ArrayList;
import java.util.List;

public
class ASTMethod extends SimpleNode {
  public String ast_id;
  public String ast_type ;

  public ASTMethod(int id) {
    super(id);
  }

  public ASTMethod(Compiler p, int id) {
    super(p, id);
  }

  @Override
  public int process() {
    SemanticProcessor.insideMethod = true;
    List<Symbol> method_args = new ArrayList<>();
    
    for (int i = 0; i < ((SimpleNode)this.children[2]).children.length/2; i++) {
      String type = ((Token)(((SimpleNode)this.children[2]).children[i*2])).image;
      ASTIdentifier identifier = (ASTIdentifier)((SimpleNode)this.children[2]).children[i*2+1];
      if(type.equals("int[]")) {
        SymbolArray curSymbol = new SymbolArray(identifier.ast_value);
        curSymbol.initialize(0);
        SemanticProcessor.methods_arrays_table.put(curSymbol.id, curSymbol);
        method_args.add(curSymbol);
      } else {
        Symbol curSymbol = new Symbol(identifier.ast_value, type);
        curSymbol.initialize(0);
        SemanticProcessor.methods_symbols_table.put(curSymbol.id, curSymbol);
        method_args.add(curSymbol);
      }    
    }
    
    SemanticProcessor.methods_table.put(ast_id, new SymbolMethod(ast_id, ast_type, method_args));

    SimpleNode curr_node;
    for (int i = 3; i < this.children.length; i++) {
      curr_node = (SimpleNode)this.children[i];
      curr_node.process();
    }

    SemanticProcessor.methods_symbols_table.clear();
    SemanticProcessor.methods_arrays_table.clear();
    SemanticProcessor.insideMethod = false;

    return 1;
  }
  
}
/* JavaCC - OriginalChecksum=dee4677a4569967c602fa79e0250dbf5 (do not edit this line) */
