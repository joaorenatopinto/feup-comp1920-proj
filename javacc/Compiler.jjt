        options
{
    LOOKAHEAD=1;
    MULTI=true;
}

PARSER_BEGIN(Compiler)

import java.util.*;
import java.io.*;

public class Compiler
{
    int nErrors = 0;
    static int MAX_ERRORS = 10;

    public static void main(String args[]) throws ParseException, IOException {
        // nErrors = 0;
        // System.out.println("Parser for Mini Java grammar");
        // System.out.println("Your shitty code's AST:");
        // System.setIn(new FileInputStream(new File(args[0])));
        Compiler comp = new Compiler(System.in);
        SimpleNode root = comp.Program(); // returns reference to root node
        System.out.println("before");
        //SemanticProcessor processor = new SemanticProcessor(root);
        System.out.println("after");
        root.dump(""); // prints the tree on the screen
    }

    void handleError(ParseException e, boolean recover) throws ParseException {

        System.out.println("Syntatic error on while statement.\n\n" +  e.toString());
        
        if (recover) recoverError();
      
        if (++nErrors > MAX_ERRORS) {
          System.out.println("Reached maximum number of errors (" + MAX_ERRORS + "). Terminating.");
        //   System.exit(1);
            throw new ParseException("MAX ERRORS PER FILE");
        }

    }
    
    void recoverError() {
        Token t;
        Token t2;

        t = getToken(1);

        do {

            do {

                t2 = getToken(1);

                if (t2.kind == LBRACKET)
                    return;
                
                if (t.kind == RPARENTHESIS)
                    break;
                    
                t = getNextToken();

            } while (t.kind != RPARENTHESIS );

            t = getToken(1);

            if (t.kind == RPARENTHESIS)
                t = getNextToken();

        } while (t.kind == RPARENTHESIS);

    }
    
}



PARSER_END(Compiler)

SKIP :
{
    " " | "\r" | "\t" | "\n"
    | < "//" (~["\r", "\n"])* >
    | < "/*" > : ML_COMMENT_STATE
}

<ML_COMMENT_STATE> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] >   
}

TOKEN:
{
    < INTEGER: (["0"-"9"])+ >
    | < SEMICOLON: ";" >
    | < IF: "if" >
    | < INT: "int" >
    | < INT_ARRAY: "int" "[" "]" >
    | < NEW: "new" >
    | < VOID: "void" >
    | < ELSE: "else" >
    | < TRUE: "true" >
    | < MAIN: "main" >
    | < THIS: "this" >
    | < WHILE: "while" >
    | < FALSE: "false" >
    | < COMMA: "," >
    | < CLASS: "class" >
    | < PUBLIC: "public" >
    | < STATIC: "static" >
    | < STRING: "String" >
    | < LENGTH: "length" >
    | < RETURN: "return" >
    | < BOOLEAN: "boolean" >
    | < EXTENDS: "extends" >
    | < IMPORT: "import" >
    | < LPARENTHESIS: "(" >
    | < RPARENTHESIS: ")" >
    | < LBRACKET: "{" >
    | < RBRACKET: "}" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < MULT: "*" >
    | < DIV: "/" >
    | < AND: "&&" >
    | < LESS: "<" >
    | < IDENTIFIER: ( (["$"]|["_"]|["A"-"Z"]|["a"-"z"])(["$"]|["0"-"9"]|["A"-"Z"]|["a"-"z"]|["_"])*) >
    
}

SimpleNode Program(): {}
{
    Start() { return jjtThis;}
}

void Start() : {}
{
    Imports() ClassDeclaration() <EOF> #File(2)
}

void Imports() : {}
{
    ( ImportDeclaration() )*
}

void ImportDeclaration() : {Token t;}
{
    //"import" ["static"] <IDENTIFIER> [ "." <IDENTIFIER> "(" [ ( Type() | "void" ) ( "," ( Type() | "void" )  )* ] ")" [ Type() | "void" ] ] ";" 
    "import" ["static" { jjtThis.isStatic=true;} ] t=<IDENTIFIER>{jjtThis.ast_className=t.image;jjtThis.line = t.beginLine; jjtThis.column = t.beginColumn;} ["." t=<IDENTIFIER> {jjtThis.methodName=t.image;jjtThis.line = t.beginLine; jjtThis.column = t.beginColumn;}] ([<LPARENTHESIS> ["void" | ImportArgs()] <RPARENTHESIS> [t=Type() |t=<VOID> #Void] {{jjtThis.returnType = t.image;jjtThis.line = t.beginLine; jjtThis.column = t.beginColumn;}} ]) ";"
}

void ImportArgs(): {}
{
    ImportArg() ("," ImportArg() )* 
}

void ImportArg(): {Token t;}
{
    t=Type() { jjtThis.ast_type = t.image; }
}

void ClassDeclaration() : {Token t1; Token t2;}
{
    "class" t1=<IDENTIFIER> [ "extends" t2=<IDENTIFIER> {jjtThis.ast_ext = t2.image; jjtThis.line = t2.beginLine; jjtThis.column = t2.beginColumn;} ] "{" ( VarDeclaration() )* ( MethodDeclaration() )* "}" {jjtThis.ast_id = t1.image; jjtThis.line = t1.beginLine; jjtThis.column = t1.beginColumn;}
}

void VarDeclaration() : {Token t1; Token t2;}
{
    t2=Type() t1=<IDENTIFIER> ";" {jjtThis.ast_id = t1.image; jjtThis.ast_type = t2.image; jjtThis.line = t2.beginLine; jjtThis.column = t2.beginColumn;}
}

void Main() : {Token t1; Token t2;}
{
    "public" "static" "void" "main" "("  "String" "[" "]" <IDENTIFIER> ")" "{" ( LOOKAHEAD(2) VarDeclaration() )* ( Statement() )* "}" 
}

void Method () : {Token t1; Token t2;}
{
    "public" t2=Type() t1=<IDENTIFIER> "(" [ MethodArgs() ] ")" "{" ( LOOKAHEAD(2) VarDeclaration() )* ( Statement() )* "return" Cal1() ";" "}" {
        jjtThis.ast_id = t1.image;
        jjtThis.ast_type = t2.image;
        jjtThis.line = t2.beginLine; jjtThis.column = t2.beginColumn;
    }   
}

void MethodDeclaration() #void : {Token t1; Token t2;}
{   
    LOOKAHEAD(2)
    Main()
    | Method()
}

void MethodArgs() : {}
{
    Arg() ( "," Arg() )*
}

void Arg() : {Token t1; Token t2;}
{
    t1=Type() t2=<IDENTIFIER> {jjtThis.ast_type = t1.image; jjtThis.ast_id = t2.image;jjtThis.line = t1.beginLine; jjtThis.column = t1.beginColumn;}
}

Token Type() #void: {Token t1;}
{  
    t1=<BOOLEAN> { return t1; }
    | t1=<INT_ARRAY> { return t1; }
    | t1=<INT> { return t1; }
    | t1=<IDENTIFIER> { return t1; }
}

void Statement() : {Token t1;}
{
    "{" ( Statement() )* "}"
    | "if" "(" Cal1() ")" Statement() #If(2) "else" Statement() #Else(1)
    | While()
    | LOOKAHEAD(2) Assign()
    | LOOKAHEAD(2) Cal1() ";"  
}

void Assign() : {Token t1; Token t2;}
{
    LOOKAHEAD(2) t1=<IDENTIFIER> "[" Cal1() "]" /*{ jjtThis.ast_identifier = t1.image; } #AcessArray(1)*/ "=" Cal1() ";" {jjtThis.identifier = t1.image;jjtThis.line = t1.beginLine; jjtThis.column = t1.beginColumn;}
    | LOOKAHEAD(2) t1=<IDENTIFIER> "=" Cal1() ";" {jjtThis.identifier = t1.image;jjtThis.line = t1.beginLine; jjtThis.column = t1.beginColumn;}
}

void While() : {} {
    <WHILE> <LPARENTHESIS> 
    try {
        Cal1() <RPARENTHESIS>
     } catch (ParseException e) {
       handleError(e, true);
     }
     Statement()
}

void Cal1() #void: {Token t;} { 
    Cal2()
    (
        LOOKAHEAD(2) t=<AND> Cal2() { jjtThis.line = t.beginLine; jjtThis.column = t.beginColumn;}#And(2)
    )*
}
 
void Cal2() #void: {Token t;} { 
    Cal3()
    (
        LOOKAHEAD(2) t=<LESS> Cal3() { jjtThis.line = t.beginLine; jjtThis.column = t.beginColumn;}#Less(2)
    )*
}


void Cal3() #void: {Token t;} {
    Cal4() 
    (
        LOOKAHEAD(2) ( 
            t=<PLUS> Cal4() { jjtThis.line = t.beginLine; jjtThis.column = t.beginColumn;}#Add(2)
            | t=<MINUS> Cal4() { jjtThis.line = t.beginLine; jjtThis.column = t.beginColumn;}#Sub(2)
        )
    )*
}

void Cal4() #void: {Token t;} {
    Cal5()
    (
        LOOKAHEAD(2) ( 
            t=<MULT> Cal5() { jjtThis.line = t.beginLine; jjtThis.column = t.beginColumn;} #Mul(2)
            | t=<DIV> Cal5() { jjtThis.line = t.beginLine; jjtThis.column = t.beginColumn;} #Div(2) 
        )
    )*
}


void Cal5() #void: {} {
    "(" Cal1() ")"
    | Expression()
}


void Expression() #void : {Token t1=null; String identifier;}
{
    (
    t1=<INTEGER>  { jjtThis.ast_value = Integer.parseInt(t1.image);} #Int
    | <TRUE> { jjtThis.ast_value = true;} #Bool
    | <FALSE> { jjtThis.ast_value = false;} #Bool
    | t1=<IDENTIFIER> { jjtThis.ast_value = t1.image; jjtThis.line = t1.beginLine; jjtThis.column = t1.beginColumn;} #Identifier 
    | t1=<THIS> { jjtThis.line = t1.beginLine; jjtThis.column = t1.beginColumn;}#This
    | "new" (   
        t1=<INT> "[" Cal1() "]" {jjtThis.line = t1.beginLine; jjtThis.column = t1.beginColumn;} #Array(1)
        | t1=<IDENTIFIER> "(" ")" { jjtThis.ast_identifier = t1.image; jjtThis.line = t1.beginLine; jjtThis.column = t1.beginColumn;} #Object
    ) 
    | "!" Cal1() #Neg(1)
    ) { if(t1==null) 
            identifier="none"; 
        else {
            identifier = t1.image; 
        }
      }
    [LOOKAHEAD(2) Expression_aux(t1) #GroupCondition(2)]
}

void Expression_aux(Token t) #void : {String identifier=null;}
{ 
    "[" Cal1() "]" { if (t != null) { jjtThis.ast_identifier = t.image; jjtThis.line = t.beginLine; jjtThis.column = t.beginColumn;}
        else jjtThis.ast_identifier = "none";
    }
     #AcessArray(1) [LOOKAHEAD(2) Expression_aux(t) #GroupCondition(2)] 
    | "." (
        "length" {if (t != null) {jjtThis.line = t.beginLine; jjtThis.column = t.beginColumn;}
    } #Length [LOOKAHEAD(2) Expression_aux(t) #GroupCondition(2)]
        | AcessMethod(t.image) [LOOKAHEAD(2) Expression_aux(t) #GroupCondition(2)]
    )
}


void AcessMethod(String identifier) : { Token t; jjtThis.ast_identifier = identifier;}
{
    t=<IDENTIFIER> "(" [ Arguments() ] ")" { jjtThis.ast_method = t.image; jjtThis.line = t.beginLine; jjtThis.column = t.beginColumn;}
}


void Arguments() : {}
{
    Cal1() ("," Cal1())*
}
