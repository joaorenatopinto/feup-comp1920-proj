/* Generated By:JJTree: Do not edit this line. ASTAcessArray.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTAcessArray extends SimpleNode {
  String ast_identifier;
  
  public ASTAcessArray(int id) {
    super(id);
  }

  public ASTAcessArray(Compiler p, int id) {
    super(p, id);
  }

  @Override
  public int process() {
    if(this.children[0].getClass().equals(ASTIdentifier.class)) {
      Symbol left_sym;
      ASTIdentifier left = (ASTIdentifier)this.children[0];
      if (SemanticProcessor.insideMethod && SemanticProcessor.methods_arrays_table.get(left.ast_value) != null) {
        left_sym = SemanticProcessor.methods_arrays_table.get(left.ast_value);
      }
      else if(SemanticProcessor.arrays_table.get(left.ast_value) != null) {
        left_sym = SemanticProcessor.arrays_table.get(left.ast_value);
      }
      else throw new RuntimeException("Array in ASTAcessArray not previous declared (" + left.ast_value + ")");

      if (left_sym.type.equals("int []")) {
        if (left_sym.init) {
          left_val = left_sym.value;
        } else throw new RuntimeException("Array " + left.ast_value + " was not initialized");
      } else throw new RuntimeException("Left child (" + left.ast_value + ") in ASTLess is not an Array");
    }
    return 1;
  }
}
/* JavaCC - OriginalChecksum=c486535c6ff220f48d2a53e89df3a0a9 (do not edit this line) */