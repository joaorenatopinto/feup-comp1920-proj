/* Generated By:JJTree: Do not edit this line. ASTAcessArray.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTAcessArray extends SimpleNode {
  String ast_identifier;
  
  public ASTAcessArray(int id) {
    super(id);
  }

  public ASTAcessArray(Compiler p, int id) {
    super(p, id);
  }

  @Override
  public int process(String className) {

    SimpleNode child = (SimpleNode)this.children[0];
    child.process(className);

    Symbol symbol = getSymbolFromTable(ast_identifier);
    
    if (symbol == null)
      throw new RuntimeException("ASTAcessArray: " + ast_identifier + " is not previous declared");

    if( !symbol.type.equals(Symbol.INT_ARRAY) ) { 
      
      throw new RuntimeException("ASTAcessArray: " + ast_identifier + " is not an array");
    }

    if (!child.getType().equals(Symbol.INT)){
      throw new RuntimeException("ASTAcessArray: index is not a Integer");
    }
    
    return 1;
  }

  public String getType(){
    Symbol symbol = getSymbolFromTable(ast_identifier);

    if (symbol == null)
      return ast_identifier + " not initialized";

    if (symbol.type.equals(Symbol.INT_ARRAY))
      return Symbol.INT;

    return "ERROR: weird type of array";
  }

  public String generateCode(String className){
    // System.out.println("CodeGenerator " + this.getClass() + " : SIMPLENODE");
    String code = "";

    Symbol symbol = getSymbolFromTable(ast_identifier);

    code += "aload " + symbol.id_jasmin + "\n";

    code += ((SimpleNode)this.children[0]).generateCode(className);

    code += "iaload\n";

    return code;
  }

}
/* JavaCC - OriginalChecksum=c486535c6ff220f48d2a53e89df3a0a9 (do not edit this line) */