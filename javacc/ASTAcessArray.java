/* Generated By:JJTree: Do not edit this line. ASTAcessArray.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTAcessArray extends SimpleNode {
  String ast_identifier;
  
  public ASTAcessArray(int id) {
    super(id);
  }

  public ASTAcessArray(Compiler p, int id) {
    super(p, id);
  }

  @Override
  public int process() {

    SimpleNode child = (SimpleNode)this.children[0];
    // int left_val;
    // int right_val;
    child.process();

    Symbol symbol = getSymbolFromTable(ast_identifier);

    if (symbol == null)
      throw new RuntimeException("ASTAcessArray: " + ast_identifier +" is not previous declared");

      // TODO check if symbol is array?

    if (child.getType() != Symbol.INT){
      throw new RuntimeException("ASTAcessArray is not a Integer");
    }
    
    return 1;


    // System.out.println(this.getClass());
    //   int left_val;
    //   SymbolArray left_sym;
    //   if (SemanticProcessor.insideMethod && SemanticProcessor.methods_arrays_table.get(ast_identifier) != null) {
    //     left_sym = SemanticProcessor.methods_arrays_table.get(ast_identifier);
    //   }
    //   else if(SemanticProcessor.arrays_table.get(ast_identifier) != null) {
    //     left_sym = SemanticProcessor.arrays_table.get(ast_identifier);
    //   }
    //   else throw new RuntimeException("Array in ASTAcessArray not previous declared (" + ast_identifier + ")");

    //   if (left_sym.type.equals("int[]")) {
    //     if (left_sym.init) {
    //       if(this.children[0].getClass().equals(ASTIdentifier.class)) {
    //         Symbol symb;
    //         ASTIdentifier left = (ASTIdentifier)this.children[0];
    //         if (SemanticProcessor.insideMethod && SemanticProcessor.methods_symbols_table.get(left.ast_value) != null) {
    //           symb = SemanticProcessor.methods_symbols_table.get(left.ast_value);
    //         }
    //         else if(SemanticProcessor.symbols_table.get(left.ast_value) != null) {
    //           symb = SemanticProcessor.symbols_table.get(left.ast_value);
    //         }
    //         else throw new RuntimeException("Variable in ASTAdd not previous declared (" + left.ast_value + ")");
            
      
    //         if (symb.type.equals("int")) {
    //           if (symb.init) {
    //             left_val = symb.value;
    //           } else throw new RuntimeException("Variable " + left.ast_value + " was not initialized");
    //         } else throw new RuntimeException("Left child (" + left.ast_value + ") in ASTLess is not an Integer");
    //       } //else if(arrayacess){}
    //       else {
    //         SimpleNode left = (SimpleNode)this.children[0];
    //         left_val = left.process();
    //       } 
    //       if(left_val >= 0 && left_val < left_sym.size){
    //         return left_sym.elements[left_val];
    //       } else throw new RuntimeException("Index out of bounds: Index " + left_val + " for length :" + left_sym.size);
    //     } else throw new RuntimeException("Array " + ast_identifier + " was not initialized");
    //   } else throw new RuntimeException("Left child (" + ast_identifier + ") in ASTArrayAcess is not an Array");
  }
  // public String getNodeType() {
  //   return this.getClass().toString();
  // }

  public String getType(){
    Symbol symbol = getSymbolFromTable(ast_identifier);

    if (symbol == null)
      return ast_identifier + " not initialized";

    if (symbol.type.equals(Symbol.INT_ARRAY))
      return Symbol.INT;

    return "ERROR: weird type of array";
  }

}
/* JavaCC - OriginalChecksum=c486535c6ff220f48d2a53e89df3a0a9 (do not edit this line) */