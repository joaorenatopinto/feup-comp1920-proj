/* Generated By:JJTree: Do not edit this line. ASTAssign.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTAssign extends SimpleNode {
  public String identifier;

  public ASTAssign(int id) {
    super(id);
  }

  public ASTAssign(Compiler p, int id) {
    super(p, id);
  }

  public int process(String className) {
    System.out.println(this.getClass());

    int index = 0;

    if (this.children.length == 2){
      ((SimpleNode)this.children[0]).process(className);

      if (!((SimpleNode)this.children[0]).getType().equals(Symbol.INT)){
        throw new RuntimeException("ASTAssign: Variable index (" + identifier + ") not a int"+ "\nLine: " + this.line + "; Col: " + this.column);
      }

      index++;
    }

    SimpleNode child = (SimpleNode)this.children[index];

    child.process(className);

    Symbol symbolLeft = getSymbolFromTable(identifier);
    System.out.println("ASTASSIGN LEFT TYPE: " + symbolLeft.type);
    if( !(symbolLeft.type.equals(Symbol.INT_ARRAY) ) ) { // not array
      if (!child.getType().equals(symbolLeft.type)) {
        throw new RuntimeException("ASTAssign is not equal (" + symbolLeft.type + ", " + child.getType() + ")"+ "\nLine: " + this.line + "; Col: " + this.column);
      }

      SymbolVar var = (SymbolVar) symbolLeft;
      
      var.initialize();
    }
    else {
      
      SymbolVar var = (SymbolVar) symbolLeft;

      if (this.children.length == 2) { // Assign value to index array
        if (!child.getType().equals(Symbol.INT)){
          throw new RuntimeException("ASTAssign: Assigned type (" + child.getType() + ") not a int"+ "\nLine: " + this.line + "; Col: " + this.column);
        }
      } else {
        if (!child.getType().equals(Symbol.INT_ARRAY)){
          throw new RuntimeException("ASTAssign: Assigned type (" + child.getType() + ") not a int[]"+ "\nLine: " + this.line + "; Col: " + this.column);
        }
        var.initialize();
      }

    }
    
    return 1;
  }

  public String getNodeType() {
    return this.getClass().toString();
  }

  public String generateCode(String className){
    String code = "";

    Symbol symbolLeft = getSymbolFromTable(identifier);

    if(symbolLeft.id_jasmin != -1){ // If not in global scope
      if (symbolLeft.type.equals(Symbol.INT_ARRAY)) {
        if (this.children.length == 2) {
          code += "aload " + symbolLeft.id_jasmin + "\n";
          CodeGenerator.incStack(this);
        }
      }
    } else {
      if (symbolLeft.type.equals(Symbol.INT_ARRAY) && this.children.length == 2){
          code += "aload_0\n";
          CodeGenerator.incStack(this);
          code += "getfield " + className + "/" + identifier + " " + SimpleNode.getTypeJasmin(symbolLeft.type) + "\n";
      } else {
        code += "aload_0\n";
        CodeGenerator.incStack(this);
      }
    }

    if (this.children != null)
      for(int i = 0; i < this.children.length; i++) {
        code += ((SimpleNode)this.children[i]).generateCode(className);
      }

    if(symbolLeft.id_jasmin != -1){ // If not in global scope
      if (symbolLeft.type.equals(Symbol.INT_ARRAY)){
        if (this.children.length == 2) {  // acess array on left
          code += "iastore\n";
          CodeGenerator.decStack(3,this);
        }
        else if (this.children.length == 1) {
          code += "astore " + symbolLeft.id_jasmin + "\n";
          CodeGenerator.decStack(1,this);
        }
      }else if (symbolLeft.type.equals(Symbol.INT) || symbolLeft.type.equals(Symbol.BOOLEAN)) {
        code += "istore " + symbolLeft.id_jasmin + "\n";
        CodeGenerator.decStack(1,this);
      } else {
        code += "astore " + symbolLeft.id_jasmin + "\n";
        CodeGenerator.decStack(1,this);
      }
    } else {
      if (symbolLeft.type.equals(Symbol.INT_ARRAY) && this.children.length == 2){
        code += "iastore\n";
        CodeGenerator.decStack(3,this);
      } else {
        code +=  "putfield " + className + "/" + identifier + " " + SimpleNode.getTypeJasmin(symbolLeft.type) + "\n";
        CodeGenerator.decStack(2,this);
      }
    }
    return code;
  }

}
/* JavaCC - OriginalChecksum=4793199788c28cc272f0923738dc0777 (do not edit this line) */
