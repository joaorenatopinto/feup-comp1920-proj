/* Generated By:JJTree: Do not edit this line. ASTAssign.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTAssign extends SimpleNode {
  public String identifier;

  public ASTAssign(int id) {
    super(id);
  }

  public ASTAssign(Compiler p, int id) {
    super(p, id);
  }

  public int process() {
    SimpleNode left = null;
    SimpleNode right = null;
    
    if(this.children.length == 2) {
      left = ((SimpleNode)this.children[0]);
      right = ((SimpleNode)this.children[1]);
    }
    else {
      right = ((SimpleNode)this.children[0]);
    }

    Symbol symbol_obj = null;
    SymbolArray array_obj = null;
 
    System.out.println(identifier);
    if (SemanticProcessor.insideMethod && SemanticProcessor.methods_symbols_table.get(identifier) != null)
      symbol_obj = SemanticProcessor.methods_symbols_table.get(identifier);
    else if (SemanticProcessor.insideMethod && SemanticProcessor.methods_arrays_table.get(identifier) != null)
      array_obj = SemanticProcessor.methods_arrays_table.get(identifier);
    else if (SemanticProcessor.symbols_table.get(identifier) != null)
      symbol_obj = SemanticProcessor.symbols_table.get(identifier);
    else if (SemanticProcessor.arrays_table.get(identifier) != null)
      array_obj = SemanticProcessor.arrays_table.get(identifier);
    else 
      throw new RuntimeException("Variable in ASTAssign (" + identifier + ") not previous declared");
      
    int right_return = right.process();

    if(symbol_obj!=null && symbol_obj.type.equals("boolean") && right_return != 0 && right_return != 1) {
      throw new RuntimeException("Afonso não gosta de falsos, se dizes que és bool, tens de ser");
    }
    else if(array_obj!=null && array_obj.type.equals("int[]")) {
      if(right.getClass() == ASTArray.class){
        array_obj.initialize(right.process());
      }
      else {
        array_obj.assignValueToIndex(left.process(), right.process());
      }
    }
    else {
      symbol_obj.initialize(right_return);
    }

    return 1;
  }

  public String getNodeType() {
    return this.getClass().toString();
  }

}
/* JavaCC - OriginalChecksum=4793199788c28cc272f0923738dc0777 (do not edit this line) */
