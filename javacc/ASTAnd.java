/* Generated By:JJTree: Do not edit this line. ASTAnd.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTAnd extends SimpleNode {
  public ASTAnd(int id) {
    super(id);
  }

  public ASTAnd(Compiler p, int id) {
    super(p, id);
  }

  @Override
  public int process() {
    //SimpleNode left = (SimpleNode)this.children[0];
    //SimpleNode right = (SimpleNode)this.children[1];
    int left_val;
    int right_val;

    if(this.children[0].getClass().equals(ASTIdentifier.class)) {
      ASTIdentifier left = (ASTIdentifier)this.children[0];
      if (SemanticProcessor.symbols_table.get(left.ast_value) == null)
        throw new RuntimeException("Variable in ASTAnd not previous declared");

      Symbol left_sym = SemanticProcessor.symbols_table.get(left.ast_value);

      if (left_sym.type == "boolean") {
          if (left_sym.init) {
            left_val = left_sym.value;
          } else throw new RuntimeException("Variable " + left.ast_value + " was not initialized");
        } else throw new RuntimeException("Left child (" + left.ast_value + ") in ASTAnd is not a Boolean");
    }
    else {
      SimpleNode left = (SimpleNode)this.children[0];
      left_val = left.process();
    }

    if(this.children[1].getClass().equals(ASTIdentifier.class)) {
      ASTIdentifier right = (ASTIdentifier)this.children[1];
      if (SemanticProcessor.symbols_table.get(right.ast_value) == null)
        throw new RuntimeException("Variable in ASTAnd not previous declared");

      Symbol right_sym = SemanticProcessor.symbols_table.get(right.ast_value);

      if (right_sym.type == "boolean") {
        if (right_sym.init) {
          right_val = right_sym.value;
        } else throw new RuntimeException("Variable " + right.ast_value + " was not initialized");
      } else throw new RuntimeException("Right child (" + right.ast_value + ") in ASTAnd is not a Boolean");
    }
    else{
      SimpleNode right = (SimpleNode)this.children[1];
      right_val = right.process();
    } 
    
    if(left_val == 1 && 1 == right_val) return 1;
    else return 0;
  }

}
/* JavaCC - OriginalChecksum=ed084117f04b5765ad1446a1a0ce70a2 (do not edit this line) */
