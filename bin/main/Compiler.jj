/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Compiler.jj */
/*@egen*/        options
{
    LOOKAHEAD=1;
               
}

PARSER_BEGIN(Compiler)

import java.util.*;
import java.io.*;

public class Compiler/*@bgen(jjtree)*/implements CompilerTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCompilerState jjtree = new JJTCompilerState();

/*@egen*/
    int nErrors = 0;
    static int MAX_ERRORS = 10;

    public static void main(String args[]) throws ParseException, IOException {
        // nErrors = 0;
        // System.out.println("Parser for Mini Java grammar");
        // System.out.println("Your shitty code's AST:");
        // System.setIn(new FileInputStream(new File(args[0])));
        Compiler comp = new Compiler(System.in);
        SimpleNode root = comp.Program(); // returns reference to root node
        System.out.println("before");
        //SemanticProcessor processor = new SemanticProcessor(root);
        System.out.println("after");
        root.dump(""); // prints the tree on the screen
    }

    void handleError(ParseException e, boolean recover) throws ParseException {

        System.out.println("Syntatic error on while statement.\n\n" +  e.toString());
        
        if (recover) recoverError();
      
        if (++nErrors > MAX_ERRORS) {
          System.out.println("Reached maximum number of errors (" + MAX_ERRORS + "). Terminating.");
        //   System.exit(1);
            throw new ParseException("MAX ERRORS PER FILE");
        }

    }
    
    void recoverError() {
        Token t;
        Token t2;

        t = getToken(1);

        do {

            do {

                t2 = getToken(1);

                if (t2.kind == LBRACKET)
                    return;
                
                if (t.kind == RPARENTHESIS)
                    break;
                    
                t = getNextToken();

            } while (t.kind != RPARENTHESIS );

            t = getToken(1);

            if (t.kind == RPARENTHESIS)
                t = getNextToken();

        } while (t.kind == RPARENTHESIS);

    }
    
}



PARSER_END(Compiler)

SKIP :
{
    " " | "\r" | "\t" | "\n"
    | < "//" (~["\r", "\n"])* >
    | < "/*" > : ML_COMMENT_STATE
}

<ML_COMMENT_STATE> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] >   
}

TOKEN:
{
    < INTEGER: (["0"-"9"])+ >
    | < SEMICOLON: ";" >
    | < IF: "if" >
    | < INT: "int" >
    | < INT_ARRAY: "int" "[" "]" >
    | < NEW: "new" >
    | < VOID: "void" >
    | < ELSE: "else" >
    | < TRUE: "true" >
    | < MAIN: "main" >
    | < THIS: "this" >
    | < WHILE: "while" >
    | < FALSE: "false" >
    | < COMMA: "," >
    | < CLASS: "class" >
    | < PUBLIC: "public" >
    | < STATIC: "static" >
    | < STRING: "String" >
    | < LENGTH: "length" >
    | < RETURN: "return" >
    | < BOOLEAN: "boolean" >
    | < EXTENDS: "extends" >
    | < IMPORT: "import" >
    | < LPARENTHESIS: "(" >
    | < RPARENTHESIS: ")" >
    | < LBRACKET: "{" >
    | < RBRACKET: "}" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < MULT: "*" >
    | < DIV: "/" >
    | < AND: "&&" >
    | < LESS: "<" >
    | < IDENTIFIER: ( (["$"]|["_"]|["A"-"Z"]|["a"-"z"])(["$"]|["0"-"9"]|["A"-"Z"]|["a"-"z"]|["_"])*) >
    
}

SimpleNode Program(): {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    Start()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ { return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    Imports() ClassDeclaration()/*@bgen(jjtree) #File( 2) */
                                 {
                                   ASTFile jjtn001 = new ASTFile(JJTFILE);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*/ <EOF>/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                   }
                                 }
/*@egen*/         /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Imports() : {/*@bgen(jjtree) Imports */
  ASTImports jjtn000 = new ASTImports(JJTIMPORTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Imports */
    try {
/*@egen*/
    ( ImportDeclaration() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ImportDeclaration() : {/*@bgen(jjtree) ImportDeclaration */
                            ASTImportDeclaration jjtn000 = new ASTImportDeclaration(JJTIMPORTDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; Token t1 = null;}
{/*@bgen(jjtree) ImportDeclaration */
    try {
/*@egen*/
    //"import" ["static"] <IDENTIFIER> [ "." <IDENTIFIER> "(" [ ( Type() | "void" ) ( "," ( Type() | "void" )  )* ] ")" [ Type() | "void" ] ] ";" 
    "import" ["static" { jjtn000.isStatic=true;} ] t=<IDENTIFIER>{jjtn000.ast_className=t.image;jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;} ["." t=<IDENTIFIER> {jjtn000.methodName=t.image;jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}] ([<LPARENTHESIS> ["void" | ImportArgs()] <RPARENTHESIS> [t1=Type() |/*@bgen(jjtree) Void */
                                                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                                                 ASTVoid jjtn001 = new ASTVoid(JJTVOID);
                                                                                                                                                                                                                                                                                                                                                 boolean jjtc001 = true;
                                                                                                                                                                                                                                                                                                                                                 jjtree.openNodeScope(jjtn001);
                                                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                                                               try {
/*@egen*/t1=<VOID>/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                               } finally {
                                                                                                                                                                                                                                                                                                                                                 if (jjtc001) {
                                                                                                                                                                                                                                                                                                                                                   jjtree.closeNodeScope(jjtn001, true);
                                                                                                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                                                                                               }
/*@egen*/      ] {{jjtn000.returnType = (t1==null)? "" : t1.image;jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}} ]) ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ImportArgs(): {/*@bgen(jjtree) ImportArgs */
  ASTImportArgs jjtn000 = new ASTImportArgs(JJTIMPORTARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImportArgs */
    try {
/*@egen*/
    ImportArg() ("," ImportArg() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void ImportArg(): {/*@bgen(jjtree) ImportArg */
                   ASTImportArg jjtn000 = new ASTImportArg(JJTIMPORTARG);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ImportArg */
    try {
/*@egen*/
    t=Type()/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { jjtn000.ast_type = t.image; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClassDeclaration() : {/*@bgen(jjtree) ClassDeclaration */
                           ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; Token t2;}
{/*@bgen(jjtree) ClassDeclaration */
    try {
/*@egen*/
    "class" t1=<IDENTIFIER> [ "extends" t2=<IDENTIFIER> {jjtn000.ast_ext = t2.image; jjtn000.line = t2.beginLine; jjtn000.column = t2.beginColumn;} ] "{" ( VarDeclaration() )* ( MethodDeclaration() )* "}"/*@bgen(jjtree)*/
                                                                                                                                                                                                             {
                                                                                                                                                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                               jjtc000 = false;
                                                                                                                                                                                                             }
/*@egen*/ {jjtn000.ast_id = t1.image; jjtn000.line = t1.beginLine; jjtn000.column = t1.beginColumn;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarDeclaration() : {/*@bgen(jjtree) VarDeclaration */
                         ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; Token t2;}
{/*@bgen(jjtree) VarDeclaration */
    try {
/*@egen*/
    t2=Type() t1=<IDENTIFIER> ";"/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ {jjtn000.ast_id = t1.image; jjtn000.ast_type = t2.image; jjtn000.line = t2.beginLine; jjtn000.column = t2.beginColumn;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Main() : {/*@bgen(jjtree) Main */
               ASTMain jjtn000 = new ASTMain(JJTMAIN);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; Token t2;}
{/*@bgen(jjtree) Main */
    try {
/*@egen*/
    "public" "static" "void" "main" "("  "String" "[" "]" <IDENTIFIER> ")" "{" ( LOOKAHEAD(2) VarDeclaration() )* ( Statement() )* "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void Method () : {/*@bgen(jjtree) Method */
                  ASTMethod jjtn000 = new ASTMethod(JJTMETHOD);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; Token t2;}
{/*@bgen(jjtree) Method */
    try {
/*@egen*/
    "public" t2=Type() t1=<IDENTIFIER> "(" [ MethodArgs() ] ")" "{" ( LOOKAHEAD(2) VarDeclaration() )* ( Statement() )* "return" Cal1() ";" "}"/*@bgen(jjtree)*/
                                                                                                                                                {
                                                                                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                  jjtc000 = false;
                                                                                                                                                }
/*@egen*/ {
        jjtn000.ast_id = t1.image;
        jjtn000.ast_type = t2.image;
        jjtn000.line = t2.beginLine; jjtn000.column = t2.beginColumn;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/   
}

void MethodDeclaration()       : {Token t1; Token t2;}
{   
    LOOKAHEAD(2)
    Main()
    | Method()
}

void MethodArgs() : {/*@bgen(jjtree) MethodArgs */
  ASTMethodArgs jjtn000 = new ASTMethodArgs(JJTMETHODARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodArgs */
    try {
/*@egen*/
    Arg() ( "," Arg() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Arg() : {/*@bgen(jjtree) Arg */
              ASTArg jjtn000 = new ASTArg(JJTARG);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; Token t2;}
{/*@bgen(jjtree) Arg */
    try {
/*@egen*/
    t1=Type() t2=<IDENTIFIER>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.ast_type = t1.image; jjtn000.ast_id = t2.image;jjtn000.line = t1.beginLine; jjtn000.column = t1.beginColumn;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Token Type()      : {Token t1;}
{  
    t1=<BOOLEAN> { return t1; }
    | t1=<INT_ARRAY> { return t1; }
    | t1=<INT> { return t1; }
    | t1=<IDENTIFIER> { return t1; }
}

void Statement() : {/*@bgen(jjtree) Statement */
                    ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}
{/*@bgen(jjtree) Statement */
    try {
/*@egen*/
    "{" ( Statement() )* "}"
    | "if" "(" Cal1() ")"/*@bgen(jjtree) #If( 2) */
                          {
                            ASTIf jjtn001 = new ASTIf(JJTIF);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
                          }
/*@egen*/        "else"/*@bgen(jjtree) #Else( 1) */
                                                    {
                                                      ASTElse jjtn002 = new ASTElse(JJTELSE);
                                                      boolean jjtc002 = true;
                                                      jjtree.openNodeScope(jjtn002);
                                                    }
                                                    try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                                                    } catch (Throwable jjte002) {
                                                      if (jjtc002) {
                                                        jjtree.clearNodeScope(jjtn002);
                                                        jjtc002 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte002 instanceof RuntimeException) {
                                                        throw (RuntimeException)jjte002;
                                                      }
                                                      if (jjte002 instanceof ParseException) {
                                                        throw (ParseException)jjte002;
                                                      }
                                                      throw (Error)jjte002;
                                                    } finally {
                                                      if (jjtc002) {
                                                        jjtree.closeNodeScope(jjtn002,  1);
                                                      }
                                                    }
/*@egen*/         
    | While()
    | LOOKAHEAD(2) Assign()
    | LOOKAHEAD(2) Cal1() ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/  
}

void Assign() : {/*@bgen(jjtree) Assign */
                 ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; Token t2;}
{/*@bgen(jjtree) Assign */
    try {
/*@egen*/
    LOOKAHEAD(2) t1=<IDENTIFIER> "[" Cal1() "]" /*{ jjtThis.ast_identifier = t1.image; } #AcessArray(1)*/ "=" Cal1() ";"/*@bgen(jjtree)*/
                                                                                                                         {
                                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                                           jjtc000 = false;
                                                                                                                         }
/*@egen*/ {jjtn000.identifier = t1.image;jjtn000.line = t1.beginLine; jjtn000.column = t1.beginColumn;}
    | LOOKAHEAD(2) t1=<IDENTIFIER> "=" Cal1() ";"/*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                  }
/*@egen*/ {jjtn000.identifier = t1.image;jjtn000.line = t1.beginLine; jjtn000.column = t1.beginColumn;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void While() : {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) While */
    try {
/*@egen*/
    <WHILE> <LPARENTHESIS> 
    try {
        Cal1() <RPARENTHESIS>
     } catch (ParseException e) {
       handleError(e, true);
     }
     Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Cal1()      : {Token t;} { 
    Cal2()
    (
        LOOKAHEAD(2) t=<AND> Cal2()/*@bgen(jjtree) #And( 2) */
                                    {
                                      ASTAnd jjtn001 = new ASTAnd(JJTAND);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtc001 = false;
                                    }
/*@egen*/ { jjtn001.line = t.beginLine; jjtn001.column = t.beginColumn;}/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                      }
                                    }
/*@egen*/       
    )*
}
 
void Cal2()      : {Token t;} { 
    Cal3()
    (
        LOOKAHEAD(2) t=<LESS> Cal3()/*@bgen(jjtree) #Less( 2) */
                                     {
                                       ASTLess jjtn001 = new ASTLess(JJTLESS);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                       jjtc001 = false;
                                     }
/*@egen*/ { jjtn001.line = t.beginLine; jjtn001.column = t.beginColumn;}/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                       }
                                     }
/*@egen*/        
    )*
}


void Cal3()      : {Token t;} {
    Cal4() 
    (
        LOOKAHEAD(2) ( 
            t=<PLUS> Cal4()/*@bgen(jjtree) #Add( 2) */
                            {
                              ASTAdd jjtn001 = new ASTAdd(JJTADD);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn001,  2);
                              jjtc001 = false;
                            }
/*@egen*/ { jjtn001.line = t.beginLine; jjtn001.column = t.beginColumn;}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
                            }
/*@egen*/       
            | t=<MINUS> Cal4()/*@bgen(jjtree) #Sub( 2) */
                               {
                                 ASTSub jjtn002 = new ASTSub(JJTSUB);
                                 boolean jjtc002 = true;
                                 jjtree.openNodeScope(jjtn002);
                               }
                               try {
/*@egen*//*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn002,  2);
                                 jjtc002 = false;
                               }
/*@egen*/ { jjtn002.line = t.beginLine; jjtn002.column = t.beginColumn;}/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc002) {
                                   jjtree.closeNodeScope(jjtn002,  2);
                                 }
                               }
/*@egen*/       
        )
    )*
}

void Cal4()      : {Token t;} {
    Cal5()
    (
        LOOKAHEAD(2) ( 
            t=<MULT> Cal5()/*@bgen(jjtree) #Mul( 2) */
                            {
                              ASTMul jjtn001 = new ASTMul(JJTMUL);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn001,  2);
                              jjtc001 = false;
                            }
/*@egen*/ { jjtn001.line = t.beginLine; jjtn001.column = t.beginColumn;}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
                            }
/*@egen*/        
            | t=<DIV> Cal5()/*@bgen(jjtree) #Div( 2) */
                             {
                               ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn002,  2);
                               jjtc002 = false;
                             }
/*@egen*/ { jjtn002.line = t.beginLine; jjtn002.column = t.beginColumn;}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002,  2);
                               }
                             }
/*@egen*/         
        )
    )*
}

void Cal5()       : {}
{
    Cal6() |
    ("!"/*@bgen(jjtree) #Neg( 1) */
         {
           ASTNeg jjtn001 = new ASTNeg(JJTNEG);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/ Cal5()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  1);
           }
         }
/*@egen*/        )
}

void Cal6()      : {} {
    "(" Cal1() ")"
    | Expression()
}


void Expression()       : {Token t1=null; String identifier;}
{
    (
    t1=<INTEGER>/*@bgen(jjtree) Int */
                  {
                    ASTInt jjtn001 = new ASTInt(JJTINT);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                  }
/*@egen*/  { jjtn001.ast_value = Integer.parseInt(t1.image);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
                  }
/*@egen*/     
    | <TRUE>/*@bgen(jjtree) Bool */
             {
               ASTBool jjtn002 = new ASTBool(JJTBOOL);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn002, true);
               jjtc002 = false;
             }
/*@egen*/ { jjtn002.ast_value = true;}/*@bgen(jjtree)*/
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
               }
             }
/*@egen*/      
    | <FALSE>/*@bgen(jjtree) Bool */
              {
                ASTBool jjtn003 = new ASTBool(JJTBOOL);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn003, true);
                jjtc003 = false;
              }
/*@egen*/ { jjtn003.ast_value = false;}/*@bgen(jjtree)*/
              } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003, true);
                }
              }
/*@egen*/      
    | t1=<IDENTIFIER>/*@bgen(jjtree) Identifier */
                      {
                        ASTIdentifier jjtn004 = new ASTIdentifier(JJTIDENTIFIER);
                        boolean jjtc004 = true;
                        jjtree.openNodeScope(jjtn004);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn004, true);
                        jjtc004 = false;
                      }
/*@egen*/ { jjtn004.ast_value = t1.image; jjtn004.line = t1.beginLine; jjtn004.column = t1.beginColumn;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc004) {
                          jjtree.closeNodeScope(jjtn004, true);
                        }
                      }
/*@egen*/             
    | t1=<THIS>/*@bgen(jjtree) This */
                {
                  ASTThis jjtn005 = new ASTThis(JJTTHIS);
                  boolean jjtc005 = true;
                  jjtree.openNodeScope(jjtn005);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn005, true);
                  jjtc005 = false;
                }
/*@egen*/ { jjtn005.line = t1.beginLine; jjtn005.column = t1.beginColumn;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc005) {
                    jjtree.closeNodeScope(jjtn005, true);
                  }
                }
/*@egen*/     
    | "new" (   
        t1=<INT> "[" Cal1() "]"/*@bgen(jjtree) #Array( 1) */
                                {
                                  ASTArray jjtn006 = new ASTArray(JJTARRAY);
                                  boolean jjtc006 = true;
                                  jjtree.openNodeScope(jjtn006);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn006,  1);
                                  jjtc006 = false;
                                }
/*@egen*/ {jjtn006.line = t1.beginLine; jjtn006.column = t1.beginColumn;}/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc006) {
                                    jjtree.closeNodeScope(jjtn006,  1);
                                  }
                                }
/*@egen*/          
        | t1=<IDENTIFIER> "(" ")"/*@bgen(jjtree) Object */
                                  {
                                    ASTObject jjtn007 = new ASTObject(JJTOBJECT);
                                    boolean jjtc007 = true;
                                    jjtree.openNodeScope(jjtn007);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn007, true);
                                    jjtc007 = false;
                                  }
/*@egen*/ { jjtn007.ast_identifier = t1.image; jjtn007.line = t1.beginLine; jjtn007.column = t1.beginColumn;}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc007) {
                                      jjtree.closeNodeScope(jjtn007, true);
                                    }
                                  }
/*@egen*/        
    ) 
    ) { if(t1==null) 
            identifier="none"; 
        else {
            identifier = t1.image; 
        }
      }
    [LOOKAHEAD(2)/*@bgen(jjtree) #GroupCondition( 2) */
                  {
                    ASTGroupCondition jjtn008 = new ASTGroupCondition(JJTGROUPCONDITION);
                    boolean jjtc008 = true;
                    jjtree.openNodeScope(jjtn008);
                  }
                  try {
/*@egen*/ Expression_aux(t1)/*@bgen(jjtree)*/
                  } catch (Throwable jjte008) {
                    if (jjtc008) {
                      jjtree.clearNodeScope(jjtn008);
                      jjtc008 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte008 instanceof RuntimeException) {
                      throw (RuntimeException)jjte008;
                    }
                    if (jjte008 instanceof ParseException) {
                      throw (ParseException)jjte008;
                    }
                    throw (Error)jjte008;
                  } finally {
                    if (jjtc008) {
                      jjtree.closeNodeScope(jjtn008,  2);
                    }
                  }
/*@egen*/                   ]
}

void Expression_aux(Token t)       : {String identifier=null;}
{ 
    "[" Cal1() "]"/*@bgen(jjtree) #AcessArray( 1) */
                   {
                     ASTAcessArray jjtn001 = new ASTAcessArray(JJTACESSARRAY);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001,  1);
                     jjtc001 = false;
                   }
/*@egen*/ { if (t != null) { jjtn001.ast_identifier = t.image; jjtn001.line = t.beginLine; jjtn001.column = t.beginColumn;}
        else jjtn001.ast_identifier = "none";
    }/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  1);
                     }
                   }
/*@egen*/
                    [LOOKAHEAD(2)/*@bgen(jjtree) #GroupCondition( 2) */
                                  {
                                    ASTGroupCondition jjtn002 = new ASTGroupCondition(JJTGROUPCONDITION);
                                    boolean jjtc002 = true;
                                    jjtree.openNodeScope(jjtn002);
                                  }
                                  try {
/*@egen*/ Expression_aux(t)/*@bgen(jjtree)*/
                                  } catch (Throwable jjte002) {
                                    if (jjtc002) {
                                      jjtree.clearNodeScope(jjtn002);
                                      jjtc002 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte002 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte002;
                                    }
                                    if (jjte002 instanceof ParseException) {
                                      throw (ParseException)jjte002;
                                    }
                                    throw (Error)jjte002;
                                  } finally {
                                    if (jjtc002) {
                                      jjtree.closeNodeScope(jjtn002,  2);
                                    }
                                  }
/*@egen*/                   ] 
    | "." (
        "length"/*@bgen(jjtree) Length */
                 {
                   ASTLength jjtn003 = new ASTLength(JJTLENGTH);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn003, true);
                   jjtc003 = false;
                 }
/*@egen*/ {if (t != null) {jjtn003.line = t.beginLine; jjtn003.column = t.beginColumn;}
    }/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
                 }
/*@egen*/         [LOOKAHEAD(2)/*@bgen(jjtree) #GroupCondition( 2) */
                            {
                              ASTGroupCondition jjtn004 = new ASTGroupCondition(JJTGROUPCONDITION);
                              boolean jjtc004 = true;
                              jjtree.openNodeScope(jjtn004);
                            }
                            try {
/*@egen*/ Expression_aux(t)/*@bgen(jjtree)*/
                            } catch (Throwable jjte004) {
                              if (jjtc004) {
                                jjtree.clearNodeScope(jjtn004);
                                jjtc004 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte004 instanceof RuntimeException) {
                                throw (RuntimeException)jjte004;
                              }
                              if (jjte004 instanceof ParseException) {
                                throw (ParseException)jjte004;
                              }
                              throw (Error)jjte004;
                            } finally {
                              if (jjtc004) {
                                jjtree.closeNodeScope(jjtn004,  2);
                              }
                            }
/*@egen*/                   ]
        | AcessMethod(t.image) [LOOKAHEAD(2)/*@bgen(jjtree) #GroupCondition( 2) */
                                             {
                                               ASTGroupCondition jjtn005 = new ASTGroupCondition(JJTGROUPCONDITION);
                                               boolean jjtc005 = true;
                                               jjtree.openNodeScope(jjtn005);
                                             }
                                             try {
/*@egen*/ Expression_aux(t)/*@bgen(jjtree)*/
                                             } catch (Throwable jjte005) {
                                               if (jjtc005) {
                                                 jjtree.clearNodeScope(jjtn005);
                                                 jjtc005 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte005 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte005;
                                               }
                                               if (jjte005 instanceof ParseException) {
                                                 throw (ParseException)jjte005;
                                               }
                                               throw (Error)jjte005;
                                             } finally {
                                               if (jjtc005) {
                                                 jjtree.closeNodeScope(jjtn005,  2);
                                               }
                                             }
/*@egen*/                   ]
    )
}


void AcessMethod(String identifier) : {/*@bgen(jjtree) AcessMethod */
                                        ASTAcessMethod jjtn000 = new ASTAcessMethod(JJTACESSMETHOD);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; jjtn000.ast_identifier = identifier;}
{/*@bgen(jjtree) AcessMethod */
    try {
/*@egen*/
    t=<IDENTIFIER> "(" [ Arguments() ] ")"/*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
                                           }
/*@egen*/ { jjtn000.ast_method = t.image; jjtn000.line = t.beginLine; jjtn000.column = t.beginColumn;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void Arguments() : {/*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Arguments */
    try {
/*@egen*/
    Cal1() ("," Cal1())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}