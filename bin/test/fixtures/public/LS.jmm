/**
 * 3rd and last Test Class where we show the potential of our program. It's very similar to the other 2.
 *  It creates an array with size 10, with: 10, 11, 12, 13, 14, 15, 16, 17, 18, prints its 
 *  contents and 9999 on end, and then searches it, using  Linear Search for 8, 12, 17 and 50. 
 *  Prints 1 on Sucess and 0 otherwise and 55 on end (return 55 from start method) 
 *  The expected output is in the "LS.txt" file.
 */

import static io.println(int) void;

// This class contains an array of integers and
// methods to initialize, print and search the array
// using Linear Search
class LS {
    int[] number ;
    int size ;

    public static void main(String[] a){
	io.println(new LS().Start(10));
    }
    
    // Invoke methods to initialize, print and search
    // for elements on the array
    public int Start(int sz){
	int aux01 ;
	int aux02 ;

	aux01 = this.Init(sz);
	aux02 = this.Print();
	io.println(9999);
	io.println(this.Search(8));
	io.println(this.Search(12)) ;
	io.println(this.Search(17)) ;
	io.println(this.Search(50)) ;
	return 55 ;
    }

    // Print array of integers
    public int Print(){
	int j ;

	j = 1 ;
	while (j < (size)) {
	    io.println(number[j]);
	    j = j + 1 ;
	}
	return 0 ;
    }

    // Search for a specific value (num) using
    // linear search
    public int Search(int num){
	int j ;
	boolean ls01 ;
	int ifound ;
	int aux01 ;
	int aux02 ;
	int nt ;

	j = 1 ;
	ls01 = false ;
	ifound = 0 ;
	
	//io.println(num);
	while (j < (size)) {
	    aux01 = number[j] ;
	    aux02 = num + 1 ;
	    if (aux01 < num) nt = 0 ;
	    else if (!(aux01 < aux02)) nt = 0 ;
	    else {
		ls01 = true ;
		ifound = 1 ;
		j = size ;
	    }
	    j = j + 1 ;
	}

	return ifound ;
    }


    
    // initialize array of integers with some
    // some sequence
    public int Init(int sz){
	int j ;
	int k ;
	int aux01 ;
	int aux02 ;

	size = sz ;
	number = new int[sz] ;
	
	j = 1 ;
	k = size + 1 ;
	while (j < (size)) {
	    aux01 = 2 * j ;
	    aux02 = k - 3 ;
	    number[j] = aux01 + aux02 ;
	    j = j + 1 ;
	    k = k - 1 ;
	}
	return 0 ;	
    }

}