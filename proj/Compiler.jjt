options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Compiler)

import java.util.*;

public class Compiler
{
    public static HashMap<String, Integer> symbol_table = new HashMap<String, Integer>();

    public static void main(String args[]) throws ParseException {
        System.out.println("Parser for Mini Java grammar");
        System.out.println("Write your shitty code:");
        Compiler comp = new Compiler(System.in);
        SimpleNode root = comp.Program(); // returns reference to root node

        root.dump(""); // prints the tree on the screen

        //System.out.println("Expression value: "+myCalc.eval(root));
    }
    /*
    int eval(SimpleNode node) {
        if(node.id == CalculatorTreeConstants.JJTNEG) {
            return -1 * eval((SimpleNode) node.jjtGetChild(0));
        }
        else if(node.jjtGetNumChildren() == 0) // leaf node with integer value
            return node.val;
        else if(node.jjtGetNumChildren() == 1) {// only one child
            return this.eval((SimpleNode) node.jjtGetChild(0));
        }
       Int
     Statement
      Assign
       Identifier
        Int
       Int
     Statement

        SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
        SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child

        switch(node.id) {
            case CalculatorTreeConstants.JJTADD : return eval( lhs ) + eval( rhs );
            case CalculatorTreeConstants.JJTSUB: return eval( lhs ) - eval( rhs );
            case CalculatorTreeConstants.JJTMUL : return eval( lhs ) * eval( rhs );
            case CalculatorTreeConstants.JJTDIV : return eval( lhs ) / eval( rhs );
            default : // abort
                System.out.println("Ilegal operator!");
                System.exit(1);
        }
        return 0;
    }*/
}



PARSER_END(Compiler)

SKIP :
{
    " " | "\r" | "\t" | "\n"
    | < "//" (~["\r", "\n"])* >
    | < "/*" > : ML_COMMENT_STATE
}

<ML_COMMENT_STATE> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] >   
}

TOKEN:
{
    < INTEGER: (["0"-"9"])+ >
    | < IF: "if" >
    | < INT: "int" >
    | < NEW: "new" >
    | < VOID: "void" >
    | < ELSE: "else" >
    | < TRUE: "true" >
    | < MAIN: "main" >
    | < THIS: "this" >
    | < WHILE: "while" >
    | < FALSE: "false" >
    | < CLASS: "class" >
    | < PUBLIC: "public" >
    | < STATIC: "static" >
    | < STRING: "String" >
    | < LENGTH: "length" >
    | < RETURN: "return" >
    | < BOOLEAN: "boolean" >
    | < EXTENDS: "extends" >
    | < IMPORT: "import" >
    | < IDENTIFIER: ( (["$"]|["_"]|["A"-"Z"]|["a"-"z"])(["0"-"9"]|["A"-"Z"]|["a"-"z"]|["_"])*) >
    
}

SimpleNode Program(): {}
{
    Start() { return jjtThis;}
}

void Start() : {}
{
    Imports() ClassDeclaration() <EOF> #File(2)
}

void Imports() : {}
{
    ( ImportDeclaration() )*
}

void ImportDeclaration() : {}
{
    "import" ["static"] <IDENTIFIER> [ "." <IDENTIFIER> "(" [ ( Type() | "void" ) ( "," ( Type() | "void" )  )* ] ")" [ Type() | "void" ] ] ";" 
}

void ClassDeclaration() : {}
{
    "class" <IDENTIFIER> [ "extends" <IDENTIFIER> ] "{" ( VarDeclaration() )* ( MethodDeclaration() )* "}"
}

void VarDeclaration() : {}
{
    Type() <IDENTIFIER> ";"
}

void MethodDeclaration() #void : {}
{  
    "public"  
    (
    Type() <IDENTIFIER> "(" [ Type() <IDENTIFIER> ( "," Type() <IDENTIFIER> )* ] ")" "{" ( LOOKAHEAD(2) VarDeclaration() )* ( Statement() )* "return" Cal1() ";" "}"
    | "static" "void" "main" "("  "String" "[" "]" <IDENTIFIER> ")" "{" ( LOOKAHEAD(2) VarDeclaration() )* ( Statement() )* "}" 
    ) 
}

void Type() #void: {}
{  
    "boolean"
    | "int" ["[" "]"]
    | <IDENTIFIER>
}

void Statement() : {}
{
    "{" ( Statement() )* "}"
    | "if" "(" Cal1() ")" Statement() #If(2) "else" Statement() #Else(1)
    | "while" "("Cal1() ")" Statement() #While(2)
    | LOOKAHEAD(2) <IDENTIFIER> "[" Cal1() "]" #Identifier(1) "=" Cal1() ";" #Assign(2)
    | LOOKAHEAD(2) <IDENTIFIER> #Identifier "=" Cal1() ";" #Assign(2)
    | Cal1() ";"  
}

void Cal1() #void: {} { 
    Cal2()
    (
        LOOKAHEAD(2) "&&" Cal2() #And(2)
    )*
}
 
void Cal2() #void: {} { 
    Cal3()
    (
        LOOKAHEAD(2) "<" Cal3() #Less(2)
    )*
}

// a < b && c < d
void Cal3() #void: {} {
    Cal4() 
    (
        LOOKAHEAD(2) ( 
            "+" Cal4() #Add(2)
            | "-" Cal4() #Sub(2)
        )
    )*
}

void Cal4() #void: {} {
    Cal5()
    (
        LOOKAHEAD(2) ( 
            "*" Cal5() #Mul(2)
            | "/" Cal5() #Div(2) 
        )
    )*
}


void Cal5() #void: {} {
    "(" Cal1() ")"
    | Expression1()
}


void Expression1() #void : {}
{
    <INTEGER> #Int [LOOKAHEAD(2) Express1() #GroupCondition(2)]
    | "true" #True [LOOKAHEAD(2) Express1() #GroupCondition(2)]
    | "false" #False [LOOKAHEAD(2) Express1() #GroupCondition(2)]
    | <IDENTIFIER> #Identifier [LOOKAHEAD(2) Express1() #GroupCondition(2)]
    | "this" #This [LOOKAHEAD(2) Express1() #GroupCondition(2)]
    | "new" (
        "int" "[" Cal1() "]" #Array(1) [LOOKAHEAD(2) Express1() #GroupCondition(2)]
        | <IDENTIFIER> "(" ")" #Object [LOOKAHEAD(2) Express1() #GroupCondition(2)]
    )
    // | "new" "int" "[" Cal1() "]" #Array(1) [Express1() #GroupCondition(2)]
    // | "new" <IDENTIFIER> "(" ")" #Object [Express1() #GroupCondition(2)]
    | "!" Cal1() #Neg(1) [LOOKAHEAD(2) Express1() #GroupCondition(2)]
}


void Express1() #void : {}
{ 
    "[" Cal1() "]" #AcessArray(1) [LOOKAHEAD(2) Express1() #GroupCondition(2)]
    | "." (
        "length" #Length [LOOKAHEAD(2) Express1() #GroupCondition(2)]
        | AcessMethod() [LOOKAHEAD(2) Express1() #GroupCondition(2)]
    )
    // | "." "length" #Length [Express1() #GroupCondition(2)]
    // | AcessMethod() [Express1() #GroupCondition(2)]
}


void AcessMethod() : {}
{
    <IDENTIFIER> "(" [ Arguments() ] ")"
}


void Arguments() : {}
{
    Cal1() ("," Cal1())*
}