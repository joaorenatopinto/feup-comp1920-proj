options
{
    LOOKAHEAD=2;
}

PARSER_BEGIN(Compiler)

import java.util.*;

public class Compiler
{
    public static HashMap<String, Integer> symbol_table = new HashMap<String, Integer>();

    public static void main(String args[]) throws ParseException {
        System.out.println("Parser for Mini Java grammar");
        System.out.println("Write your shitty code:");
        Compiler comp = new Compiler(System.in);
        SimpleNode root = comp.Program(); // returns reference to root node

        root.dump(""); // prints the tree on the screen

        //System.out.println("Expression value: "+myCalc.eval(root));
    }
    /*
    int eval(SimpleNode node) {
        if(node.id == CalculatorTreeConstants.JJTNEG) {
            return -1 * eval((SimpleNode) node.jjtGetChild(0));
        }
        else if(node.jjtGetNumChildren() == 0) // leaf node with integer value
            return node.val;
        else if(node.jjtGetNumChildren() == 1) {// only one child
            return this.eval((SimpleNode) node.jjtGetChild(0));
        }

        SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
        SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child

        switch(node.id) {
            case CalculatorTreeConstants.JJTADD : return eval( lhs ) + eval( rhs );
            case CalculatorTreeConstants.JJTSUB: return eval( lhs ) - eval( rhs );
            case CalculatorTreeConstants.JJTMUL : return eval( lhs ) * eval( rhs );
            case CalculatorTreeConstants.JJTDIV : return eval( lhs ) / eval( rhs );
            default : // abort
                System.out.println("Ilegal operator!");
                System.exit(1);
        }
        return 0;
    }*/
}



PARSER_END(Compiler)

SKIP :
{
    " " | "\r" | "\t" | "\n"
}

TOKEN:
{
    < INTEGER: (["0"-"9"])+ >
    | < IF: "if" >
    | < INT: "int" >
    | < NEW: "new" >
    | < VOID: "void" >
    | < ELSE: "else" >
    | < TRUE: "true" >
    | < MAIN: "main" >
    | < THIS: "this" >
    | < WHILE: "while" >
    | < FALSE: "false" >
    | < CLASS: "class" >
    | < PUBLIC: "public" >
    | < STATIC: "static" >
    | < STRING: "String" >
    | < LENGTH: "length" >
    | < RETURN: "return" >
    | < BOOLEAN: "boolean" >
    | < EXTENDS: "extends" >
    | < IMPORT: "import" >
    | < IDENTIFIER: ( (["$"]|["_"]|["A"-"Z"]|["a"-"z"])(["0"-"9"]|["A"-"Z"]|["a"-"z"]|["_"])*) >
    
}

SimpleNode Program(): {/* System.out.println("Program.\n"); */}
{
    Start() { return jjtThis;}
}

void Start(): {/* System.out.println("Start\n"); */}
{
    ImportDeclaration() ClassDeclaration() <EOF>
}

void ImportDeclaration(): {/* System.out.println("ImportDeclaration\n"); */}
{
    ( "import" ["static"] <IDENTIFIER> [ "." <IDENTIFIER> "(" [ ( Type() | "void" ) ( "," ( Type() | "void" )  )* ] ")" [ Type() | "void" ] ] ";" )*//feito para passar no exemplo dos stores apenas. corrigir depois
}

void ClassDeclaration(): {/* System.out.println("ClassDeclaration\n"); */}
{
    "class" <IDENTIFIER> [ "extends" <IDENTIFIER> ] "{" ( VarDeclaration() )* ( MethodDeclaration() )* "}"
}

void VarDeclaration(): {/* System.out.println("VarDeclaration\n"); */}
{
    Type() <IDENTIFIER> ";"
}

void MethodDeclaration(): {/* System.out.println("MethodDeclaration\n"); */}
{
    "public" Type() <IDENTIFIER> "(" [ Type() <IDENTIFIER> ( "," Type() <IDENTIFIER> )* ] ")" "{" ( VarDeclaration() )* ( Statement() )* "return" Expression() ";" "}"
    | "public" "static" "void" "main" "("  "String" "[" "]" <IDENTIFIER> ")" "{" ( VarDeclaration() )* ( Statement() )* "}"
}

void Type(): {/* System.out.println("Type\n"); */}
{
    "int" "[" "]"
    | "boolean"
    | "int"
    | <IDENTIFIER>
}

void Statement(): {/* System.out.println("Statement\n"); */}
{
    "{" ( Statement() )* "}"
    | "if" "(" Expression() ")" Statement() "else" Statement()
    | "while" "("Expression() ")" Statement()
    | <IDENTIFIER> "[" Expression() "]" "=" Expression() ";"
    | <IDENTIFIER> "=" Expression() ";"
    | Expression() ";"  
    // | <IDENTIFIER> "[" Expression() "]" "=" <IDENTIFIER> "[" Expression() "]" ";"
}

void Expression(): {/* System.out.println("Expression\n"); */}
{
    <INTEGER> [Express()]
    | "true" [Express()]
    | "false" [Express()]
    | <IDENTIFIER> [Express()]
    | "this" [Express()]
    | "new" "int" "[" Expression() "]" [Express()]
    | "new" <IDENTIFIER> "(" ")" [Express()]
    | "!" Expression() [Express()]
    | "(" Expression() ")" [Express()]
}

void Express() : {/* System.out.println("Express\n"); */}
{
    ( "&&" | "<" | "+" | "-" | "*" | "/" ) Expression() [Express()]
    | "[" Expression() "]" [Express()]
    | "." "length" [Express()] /* OPTIMIZAO CARALHOOOOO  */
    | "." <IDENTIFIER> "(" [ Expression() ( "," Expression() )* ] ")" [Express()]
}