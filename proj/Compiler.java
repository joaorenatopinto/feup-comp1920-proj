/* Generated By:JJTree&JavaCC: Do not edit this line. Compiler.java */
import java.util.*;
import java.io.*;

public class Compiler/*@bgen(jjtree)*/implements CompilerTreeConstants, CompilerConstants {/*@bgen(jjtree)*/
  protected static JJTCompilerState jjtree = new JJTCompilerState();static int nErrors;
    static int MAX_ERRORS = 10;

    public static HashMap<String, Integer> symbol_table = new HashMap<String, Integer>();

    public static void main(String args[]) throws ParseException, IOException {
        nErrors = 0;
        System.out.println("Parser for Mini Java grammar");
        System.out.println("Your shitty code's AST:");
        System.setIn(new FileInputStream(new File(args[0])));
        Compiler comp = new Compiler(System.in);
        SimpleNode root = comp.Program(); // returns reference to root node

        root.dump(""); // prints the tree on the screen
    }

    static void reportError(ParseException e) {

        System.out.println("Syntatic error on while statement.\u005cn\u005cn" +  e.toString());

        recoverError();

        if (++nErrors > MAX_ERRORS) {
          System.out.println("Reached maximum number of errors (" + MAX_ERRORS + "). Terminating.");
          System.exit(1);
        }

    }

    static void recoverError() {
        Token t;
        Token t2;

        t = getToken(1);

        do {

            do {

                t2 = getToken(1);

                if (t2.kind == LBRACKET)
                    return;

                if (t.kind == RPARENTHESIS)
                    break;

                t = getNextToken();

            } while (t.kind != RPARENTHESIS );

            t = getToken(1);

            if (t.kind == RPARENTHESIS)
                t = getNextToken();

        } while (t.kind == RPARENTHESIS);

    }

  static final public SimpleNode Program() throws ParseException {
                       /*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Start();
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Start() throws ParseException {
                /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Imports();
      ClassDeclaration();
                                   ASTFile jjtn001 = new ASTFile(JJTFILE);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(0);
      } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                   }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Imports() throws ParseException {
                  /*@bgen(jjtree) Imports */
  ASTImports jjtn000 = new ASTImports(JJTIMPORTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        ImportDeclaration();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ImportDeclaration() throws ParseException {
                            /*@bgen(jjtree) ImportDeclaration */
  ASTImportDeclaration jjtn000 = new ASTImportDeclaration(JJTIMPORTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IMPORT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        jj_consume_token(36);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(LPARENTHESIS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case INT_ARRAY:
        case VOID:
        case BOOLEAN:
        case IDENTIFIER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case INT_ARRAY:
          case BOOLEAN:
          case IDENTIFIER:
            Type();
            break;
          case VOID:
            jj_consume_token(VOID);
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 37:
              ;
              break;
            default:
              jj_la1[3] = jj_gen;
              break label_2;
            }
            jj_consume_token(37);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INT:
            case INT_ARRAY:
            case BOOLEAN:
            case IDENTIFIER:
              Type();
              break;
            case VOID:
              jj_consume_token(VOID);
              break;
            default:
              jj_la1[4] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        jj_consume_token(RPARENTHESIS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case INT_ARRAY:
        case VOID:
        case BOOLEAN:
        case IDENTIFIER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case INT_ARRAY:
          case BOOLEAN:
          case IDENTIFIER:
            Type();
            break;
          case VOID:
            jj_consume_token(VOID);
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ClassDeclaration() throws ParseException {
                           /*@bgen(jjtree) ClassDeclaration */
                           ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t1; Token t2;
    try {
      jj_consume_token(CLASS);
      t1 = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        t2 = jj_consume_token(IDENTIFIER);
                                                         jjtn000.ast_ext = t2.image;
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(LBRACKET);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case INT_ARRAY:
        case BOOLEAN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
        VarDeclaration();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        MethodDeclaration();
      }
      jj_consume_token(RBRACKET);
                                                                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                 jjtc000 = false;
                                                                                                                                                jjtn000.ast_id = t1.image;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void VarDeclaration() throws ParseException {
                         /*@bgen(jjtree) VarDeclaration */
                         ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t1; Token t2;
    try {
      t2 = Type();
      t1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                   jjtn000.ast_id = t1.image; jjtn000.ast_type = t2.image;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MethodDeclaration() throws ParseException {
                            /*@bgen(jjtree) MethodDeclaration */
                            ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t1; Token t2;
    try {
      jj_consume_token(PUBLIC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case INT_ARRAY:
      case BOOLEAN:
      case IDENTIFIER:
        t2 = Type();
        t1 = jj_consume_token(IDENTIFIER);
        jj_consume_token(LPARENTHESIS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case INT_ARRAY:
        case BOOLEAN:
        case IDENTIFIER:
          MethodArgs();
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        jj_consume_token(RPARENTHESIS);
        jj_consume_token(LBRACKET);
        label_5:
        while (true) {
          if (jj_2_1(2)) {
            ;
          } else {
            break label_5;
          }
          VarDeclaration();
        }
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
          case IF:
          case NEW:
          case TRUE:
          case THIS:
          case WHILE:
          case FALSE:
          case LPARENTHESIS:
          case LBRACKET:
          case IDENTIFIER:
          case 47:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_6;
          }
          Statement();
        }
        jj_consume_token(RETURN);
        Cal1();
        jj_consume_token(SEMICOLON);
        jj_consume_token(RBRACKET);
                                                                                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                         jjtc000 = false;
                                                                                                                                        jjtn000.ast_id = t1.image; jjtn000.ast_return_type = t2.image;
        break;
      case STATIC:
        jj_consume_token(STATIC);
        jj_consume_token(VOID);
        jj_consume_token(MAIN);
        jj_consume_token(LPARENTHESIS);
        jj_consume_token(STRING);
        jj_consume_token(38);
        jj_consume_token(39);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(RPARENTHESIS);
        jj_consume_token(LBRACKET);
        label_7:
        while (true) {
          if (jj_2_2(2)) {
            ;
          } else {
            break label_7;
          }
          VarDeclaration();
        }
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
          case IF:
          case NEW:
          case TRUE:
          case THIS:
          case WHILE:
          case FALSE:
          case LPARENTHESIS:
          case LBRACKET:
          case IDENTIFIER:
          case 47:
            ;
            break;
          default:
            jj_la1[14] = jj_gen;
            break label_8;
          }
          Statement();
        }
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MethodArgs() throws ParseException {
                     /*@bgen(jjtree) MethodArgs */
  ASTMethodArgs jjtn000 = new ASTMethodArgs(JJTMETHODARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      jj_consume_token(IDENTIFIER);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 37:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_9;
        }
        jj_consume_token(37);
        Type();
        jj_consume_token(IDENTIFIER);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public Token Type() throws ParseException {
                     Token t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      t1 = jj_consume_token(BOOLEAN);
                   {if (true) return t1;}
      break;
    case INT_ARRAY:
      t1 = jj_consume_token(INT_ARRAY);
                       {if (true) return t1;}
      break;
    case INT:
      t1 = jj_consume_token(INT);
                 {if (true) return t1;}
      break;
    case IDENTIFIER:
      t1 = jj_consume_token(IDENTIFIER);
                        {if (true) return t1;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Statement() throws ParseException {
                    /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
          case IF:
          case NEW:
          case TRUE:
          case THIS:
          case WHILE:
          case FALSE:
          case LPARENTHESIS:
          case LBRACKET:
          case IDENTIFIER:
          case 47:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_10;
          }
          Statement();
        }
        jj_consume_token(RBRACKET);
        break;
      case IF:
        jj_consume_token(IF);
        jj_consume_token(LPARENTHESIS);
        Cal1();
        jj_consume_token(RPARENTHESIS);
                            ASTIf jjtn001 = new ASTIf(JJTIF);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
        try {
          Statement();
        } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte001;}
                            }
                            if (jjte001 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte001;}
                            }
                            {if (true) throw (Error)jjte001;}
        } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
        }
        jj_consume_token(ELSE);
                                                      ASTElse jjtn002 = new ASTElse(JJTELSE);
                                                      boolean jjtc002 = true;
                                                      jjtree.openNodeScope(jjtn002);
        try {
          Statement();
        } catch (Throwable jjte002) {
                                                      if (jjtc002) {
                                                        jjtree.clearNodeScope(jjtn002);
                                                        jjtc002 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte002 instanceof RuntimeException) {
                                                        {if (true) throw (RuntimeException)jjte002;}
                                                      }
                                                      if (jjte002 instanceof ParseException) {
                                                        {if (true) throw (ParseException)jjte002;}
                                                      }
                                                      {if (true) throw (Error)jjte002;}
        } finally {
                                                      if (jjtc002) {
                                                        jjtree.closeNodeScope(jjtn002,  1);
                                                      }
        }
        break;
      case WHILE:
        WhileStatement();
        break;
      default:
        jj_la1[19] = jj_gen;
        if (jj_2_3(2)) {
          jj_consume_token(IDENTIFIER);
          jj_consume_token(38);
          Cal1();
                                             ASTIdentifier jjtn003 = new ASTIdentifier(JJTIDENTIFIER);
                                             boolean jjtc003 = true;
                                             jjtree.openNodeScope(jjtn003);
          try {
            jj_consume_token(39);
          } finally {
                                             if (jjtc003) {
                                               jjtree.closeNodeScope(jjtn003,  1);
                                             }
          }
          jj_consume_token(40);
          Cal1();
                                                                           ASTAssign jjtn004 = new ASTAssign(JJTASSIGN);
                                                                           boolean jjtc004 = true;
                                                                           jjtree.openNodeScope(jjtn004);
          try {
            jj_consume_token(SEMICOLON);
          } finally {
                                                                           if (jjtc004) {
                                                                             jjtree.closeNodeScope(jjtn004,  2);
                                                                           }
          }
        } else if (jj_2_4(2)) {
                     ASTIdentifier jjtn005 = new ASTIdentifier(JJTIDENTIFIER);
                     boolean jjtc005 = true;
                     jjtree.openNodeScope(jjtn005);
          try {
            jj_consume_token(IDENTIFIER);
          } finally {
                     if (jjtc005) {
                       jjtree.closeNodeScope(jjtn005, true);
                     }
          }
          jj_consume_token(40);
          Cal1();
                                                         ASTAssign jjtn006 = new ASTAssign(JJTASSIGN);
                                                         boolean jjtc006 = true;
                                                         jjtree.openNodeScope(jjtn006);
          try {
            jj_consume_token(SEMICOLON);
          } finally {
                                                         if (jjtc006) {
                                                           jjtree.closeNodeScope(jjtn006,  2);
                                                         }
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
          case NEW:
          case TRUE:
          case THIS:
          case FALSE:
          case LPARENTHESIS:
          case IDENTIFIER:
          case 47:
            Cal1();
            jj_consume_token(SEMICOLON);
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void WhileStatement() throws ParseException {
                         /*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPARENTHESIS);
      try {
        Cal1();
        jj_consume_token(RPARENTHESIS);
      } catch (ParseException e) {
       reportError(e);
      }
      Statement();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Cal1() throws ParseException {
    Cal2();
    label_11:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_11;
      }
      jj_consume_token(41);
                            ASTAnd jjtn001 = new ASTAnd(JJTAND);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
      try {
        Cal2();
      } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte001;}
                            }
                            if (jjte001 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte001;}
                            }
                            {if (true) throw (Error)jjte001;}
      } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
      }
    }
  }

  static final public void Cal2() throws ParseException {
    Cal3();
    label_12:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(42);
                           ASTLess jjtn001 = new ASTLess(JJTLESS);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
      try {
        Cal3();
      } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte001;}
                           }
                           if (jjte001 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte001;}
                           }
                           {if (true) throw (Error)jjte001;}
      } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                           }
      }
    }
  }

  static final public void Cal3() throws ParseException {
    Cal4();
    label_13:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        jj_consume_token(43);
                  ASTAdd jjtn001 = new ASTAdd(JJTADD);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
          Cal4();
        } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
        break;
      case 44:
        jj_consume_token(44);
                    ASTSub jjtn002 = new ASTSub(JJTSUB);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
        try {
          Cal4();
        } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte002;}
                    }
                    if (jjte002 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte002;}
                    }
                    {if (true) throw (Error)jjte002;}
        } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                    }
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Cal4() throws ParseException {
    Cal5();
    label_14:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        jj_consume_token(45);
                  ASTMul jjtn001 = new ASTMul(JJTMUL);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
          Cal5();
        } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
        break;
      case 46:
        jj_consume_token(46);
                    ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
        try {
          Cal5();
        } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte002;}
                    }
                    if (jjte002 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte002;}
                    }
                    {if (true) throw (Error)jjte002;}
        } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                    }
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Cal5() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPARENTHESIS:
      jj_consume_token(LPARENTHESIS);
      Cal1();
      jj_consume_token(RPARENTHESIS);
      break;
    case INTEGER:
    case NEW:
    case TRUE:
    case THIS:
    case FALSE:
    case IDENTIFIER:
    case 47:
      Expression();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expression() throws ParseException {
                           Token t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t1 = jj_consume_token(INTEGER);
                    ASTInt jjtn001 = new ASTInt(JJTINT);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
      try {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.ast_value = Integer.parseInt(t1.image);
      } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
      }
      break;
    case TRUE:
      jj_consume_token(TRUE);
               ASTBool jjtn002 = new ASTBool(JJTBOOL);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
      try {
               jjtree.closeNodeScope(jjtn002, true);
               jjtc002 = false;
               jjtn002.ast_value = true;
      } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
               }
      }
      break;
    case FALSE:
      jj_consume_token(FALSE);
                ASTBool jjtn003 = new ASTBool(JJTBOOL);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
      try {
                jjtree.closeNodeScope(jjtn003, true);
                jjtc003 = false;
                jjtn003.ast_value = false;
      } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003, true);
                }
      }
      break;
    case IDENTIFIER:
      t1 = jj_consume_token(IDENTIFIER);
                        ASTIdentifier jjtn004 = new ASTIdentifier(JJTIDENTIFIER);
                        boolean jjtc004 = true;
                        jjtree.openNodeScope(jjtn004);
      try {
                        jjtree.closeNodeScope(jjtn004, true);
                        jjtc004 = false;
                        jjtn004.ast_value = t1.image;
      } finally {
                        if (jjtc004) {
                          jjtree.closeNodeScope(jjtn004, true);
                        }
      }
      break;
    case THIS:
        ASTThis jjtn005 = new ASTThis(JJTTHIS);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(THIS);
      } finally {
        if (jjtc005) {
          jjtree.closeNodeScope(jjtn005, true);
        }
      }
      break;
    case NEW:
      jj_consume_token(NEW);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        jj_consume_token(38);
        Cal1();
                           ASTArray jjtn006 = new ASTArray(JJTARRAY);
                           boolean jjtc006 = true;
                           jjtree.openNodeScope(jjtn006);
        try {
          jj_consume_token(39);
        } finally {
                           if (jjtc006) {
                             jjtree.closeNodeScope(jjtn006,  1);
                           }
        }
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        jj_consume_token(LPARENTHESIS);
                             ASTObject jjtn007 = new ASTObject(JJTOBJECT);
                             boolean jjtc007 = true;
                             jjtree.openNodeScope(jjtn007);
        try {
          jj_consume_token(RPARENTHESIS);
        } finally {
                             if (jjtc007) {
                               jjtree.closeNodeScope(jjtn007, true);
                             }
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case 47:
      jj_consume_token(47);
            ASTNeg jjtn008 = new ASTNeg(JJTNEG);
            boolean jjtc008 = true;
            jjtree.openNodeScope(jjtn008);
      try {
        Cal1();
      } catch (Throwable jjte008) {
            if (jjtc008) {
              jjtree.clearNodeScope(jjtn008);
              jjtc008 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte008 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte008;}
            }
            if (jjte008 instanceof ParseException) {
              {if (true) throw (ParseException)jjte008;}
            }
            {if (true) throw (Error)jjte008;}
      } finally {
            if (jjtc008) {
              jjtree.closeNodeScope(jjtn008,  1);
            }
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_9(2)) {
                    ASTGroupCondition jjtn009 = new ASTGroupCondition(JJTGROUPCONDITION);
                    boolean jjtc009 = true;
                    jjtree.openNodeScope(jjtn009);
      try {
        Expression_aux();
      } catch (Throwable jjte009) {
                    if (jjtc009) {
                      jjtree.clearNodeScope(jjtn009);
                      jjtc009 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte009 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte009;}
                    }
                    if (jjte009 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte009;}
                    }
                    {if (true) throw (Error)jjte009;}
      } finally {
                    if (jjtc009) {
                      jjtree.closeNodeScope(jjtn009,  2);
                    }
      }
    } else {
      ;
    }
  }

  static final public void Expression_aux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      jj_consume_token(38);
      Cal1();
                 ASTAcessArray jjtn001 = new ASTAcessArray(JJTACESSARRAY);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(39);
      } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  1);
                 }
      }
      if (jj_2_10(2)) {
                                                  ASTGroupCondition jjtn002 = new ASTGroupCondition(JJTGROUPCONDITION);
                                                  boolean jjtc002 = true;
                                                  jjtree.openNodeScope(jjtn002);
        try {
          Expression_aux();
        } catch (Throwable jjte002) {
                                                  if (jjtc002) {
                                                    jjtree.clearNodeScope(jjtn002);
                                                    jjtc002 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte002 instanceof RuntimeException) {
                                                    {if (true) throw (RuntimeException)jjte002;}
                                                  }
                                                  if (jjte002 instanceof ParseException) {
                                                    {if (true) throw (ParseException)jjte002;}
                                                  }
                                                  {if (true) throw (Error)jjte002;}
        } finally {
                                                  if (jjtc002) {
                                                    jjtree.closeNodeScope(jjtn002,  2);
                                                  }
        }
      } else {
        ;
      }
      break;
    case 36:
      jj_consume_token(36);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LENGTH:
          ASTLength jjtn003 = new ASTLength(JJTLENGTH);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(LENGTH);
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
        if (jj_2_11(2)) {
                                         ASTGroupCondition jjtn004 = new ASTGroupCondition(JJTGROUPCONDITION);
                                         boolean jjtc004 = true;
                                         jjtree.openNodeScope(jjtn004);
          try {
            Expression_aux();
          } catch (Throwable jjte004) {
                                         if (jjtc004) {
                                           jjtree.clearNodeScope(jjtn004);
                                           jjtc004 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte004 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte004;}
                                         }
                                         if (jjte004 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte004;}
                                         }
                                         {if (true) throw (Error)jjte004;}
          } finally {
                                         if (jjtc004) {
                                           jjtree.closeNodeScope(jjtn004,  2);
                                         }
          }
        } else {
          ;
        }
        break;
      case IDENTIFIER:
        AcessMethod();
        if (jj_2_12(2)) {
                                        ASTGroupCondition jjtn005 = new ASTGroupCondition(JJTGROUPCONDITION);
                                        boolean jjtc005 = true;
                                        jjtree.openNodeScope(jjtn005);
          try {
            Expression_aux();
          } catch (Throwable jjte005) {
                                        if (jjtc005) {
                                          jjtree.clearNodeScope(jjtn005);
                                          jjtc005 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte005 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte005;}
                                        }
                                        if (jjte005 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte005;}
                                        }
                                        {if (true) throw (Error)jjte005;}
          } finally {
                                        if (jjtc005) {
                                          jjtree.closeNodeScope(jjtn005,  2);
                                        }
          }
        } else {
          ;
        }
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void AcessMethod() throws ParseException {
                      /*@bgen(jjtree) AcessMethod */
  ASTAcessMethod jjtn000 = new ASTAcessMethod(JJTACESSMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPARENTHESIS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case NEW:
      case TRUE:
      case THIS:
      case FALSE:
      case LPARENTHESIS:
      case IDENTIFIER:
      case 47:
        Arguments();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      jj_consume_token(RPARENTHESIS);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Arguments() throws ParseException {
                    /*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Cal1();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 37:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_15;
        }
        jj_consume_token(37);
        Cal1();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(38)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(INT_ARRAY)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(36)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(38)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(47)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_24()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(46)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(45)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(40)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000000,0x1000000,0x1000b000,0x0,0x1000b000,0x1000b000,0x1000b000,0x1000b000,0x0,0x20000000,0x10003000,0x800000,0x10003000,0x803a4a00,0x803a4a00,0x11003000,0x0,0x10003000,0x803a4a00,0x100800,0x802a4200,0x0,0x0,0x802a4200,0x1000,0x2a4200,0x4000000,0x0,0x802a4200,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x8,0x20,0x8,0x8,0x8,0x8,0x10,0x0,0x8,0x0,0x8,0x800a,0x800a,0x8,0x20,0x8,0x800a,0x2,0x8008,0x1800,0x6000,0x8008,0x8,0x8008,0x8,0x50,0x8008,0x20,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[12];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Compiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Compiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Compiler(CompilerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
