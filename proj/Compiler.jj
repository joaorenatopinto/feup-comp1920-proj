/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Compiler.jj */
/*@egen*/options
{
    LOOKAHEAD=2;
}

PARSER_BEGIN(Compiler)

import java.util.*;

public class Compiler/*@bgen(jjtree)*/implements CompilerTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCompilerState jjtree = new JJTCompilerState();

/*@egen*/
    public static HashMap<String, Integer> symbol_table = new HashMap<String, Integer>();

    public static void main(String args[]) throws ParseException {
        System.out.println("Parser for Mini Java grammar");
        System.out.println("Write your shitty code:");
        Compiler comp = new Compiler(System.in);
        SimpleNode root = comp.Program(); // returns reference to root node

        root.dump(""); // prints the tree on the screen

        //System.out.println("Expression value: "+myCalc.eval(root));
    }
    /*
    int eval(SimpleNode node) {
        if(node.id == CalculatorTreeConstants.JJTNEG) {
            return -1 * eval((SimpleNode) node.jjtGetChild(0));
        }
        else if(node.jjtGetNumChildren() == 0) // leaf node with integer value
            return node.val;
        else if(node.jjtGetNumChildren() == 1) {// only one child
            return this.eval((SimpleNode) node.jjtGetChild(0));
        }

        SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
        SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child

        switch(node.id) {
            case CalculatorTreeConstants.JJTADD : return eval( lhs ) + eval( rhs );
            case CalculatorTreeConstants.JJTSUB: return eval( lhs ) - eval( rhs );
            case CalculatorTreeConstants.JJTMUL : return eval( lhs ) * eval( rhs );
            case CalculatorTreeConstants.JJTDIV : return eval( lhs ) / eval( rhs );
            default : // abort
                System.out.println("Ilegal operator!");
                System.exit(1);
        }
        return 0;
    }*/
}



PARSER_END(Compiler)

SKIP :
{
    " " | "\r" | "\t" | "\n"
}

TOKEN:
{
    < INTEGER: (["0"-"9"])+ >
    | < IF: "if" >
    | < INT: "int" >
    | < NEW: "new" >
    | < VOID: "void" >
    | < ELSE: "else" >
    | < TRUE: "true" >
    | < MAIN: "main" >
    | < THIS: "this" >
    | < WHILE: "while" >
    | < FALSE: "false" >
    | < CLASS: "class" >
    | < PUBLIC: "public" >
    | < STATIC: "static" >
    | < STRING: "String" >
    | < LENGTH: "length" >
    | < RETURN: "return" >
    | < BOOLEAN: "boolean" >
    | < EXTENDS: "extends" >
    | < IMPORT: "import" >
    | < IDENTIFIER: ( (["$"]|["_"]|["A"-"Z"]|["a"-"z"])(["0"-"9"]|["A"-"Z"]|["a"-"z"]|["_"])*) >
    
}

SimpleNode Program(): {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*//* System.out.println("Program.\n"); */}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    Start()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ { return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Start()       : {/* System.out.println("Start\n"); */}
{
    ImportDeclaration() ClassDeclaration()/*@bgen(jjtree) #File( 2) */
                                           {
                                             SimpleNode jjtn001 = new SimpleNode(JJTFILE);
                                             boolean jjtc001 = true;
                                             jjtree.openNodeScope(jjtn001);
                                           }
                                           try {
/*@egen*/ <EOF>/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc001) {
                                               jjtree.closeNodeScope(jjtn001,  2);
                                             }
                                           }
/*@egen*/         
}

void ImportDeclaration()       : {/* System.out.println("ImportDeclaration\n"); */}
{
    ( "import" ["static"] <IDENTIFIER> [ "." <IDENTIFIER> "(" [ ( Type() | "void" ) ( "," ( Type() | "void" )  )* ] ")" [ Type() | "void" ] ] ";" )*//feito para passar no exemplo dos stores apenas. corrigir depois
}

void ClassDeclaration()       : {/* System.out.println("ClassDeclaration\n"); */}
{
    "class" <IDENTIFIER> [ "extends" <IDENTIFIER> ] "{" ( VarDeclaration() )* ( MethodDeclaration() )* "}"
}

void VarDeclaration()       : {/* System.out.println("VarDeclaration\n"); */}
{
    Type() <IDENTIFIER> ";"
}

void MethodDeclaration()       : {/* System.out.println("MethodDeclaration\n"); */}
{
    "public" Type() <IDENTIFIER> "(" [ Type() <IDENTIFIER> ( "," Type() <IDENTIFIER> )* ] ")" "{" ( VarDeclaration() )* ( Statement() )* "return" Expression() ";" "}"
    | "public" "static" "void" "main" "("  "String" "[" "]" <IDENTIFIER> ")" "{" ( VarDeclaration() )* ( Statement() )* "}"
}

void Type()       : {/* System.out.println("Type\n"); */}
{
    "int" "[" "]"
    | "boolean"
    | "int"
    | <IDENTIFIER>
}

void Statement()       : {/* System.out.println("Statement\n"); */}
{
    "{" ( Statement() )* "}"
    | "if" "(" Expression() ")" Statement() "else"/*@bgen(jjtree) #IfElse( 2) */
                                                   {
                                                     SimpleNode jjtn001 = new SimpleNode(JJTIFELSE);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                   }
                                                   try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                                                   } catch (Throwable jjte001) {
                                                     if (jjtc001) {
                                                       jjtree.clearNodeScope(jjtn001);
                                                       jjtc001 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte001 instanceof RuntimeException) {
                                                       throw (RuntimeException)jjte001;
                                                     }
                                                     if (jjte001 instanceof ParseException) {
                                                       throw (ParseException)jjte001;
                                                     }
                                                     throw (Error)jjte001;
                                                   } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                     }
                                                   }
/*@egen*/           
    | "while" "("Expression() ")"/*@bgen(jjtree) While */
                                  {
                                    SimpleNode jjtn002 = new SimpleNode(JJTWHILE);
                                    boolean jjtc002 = true;
                                    jjtree.openNodeScope(jjtn002);
                                  }
                                  try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte002) {
                                    if (jjtc002) {
                                      jjtree.clearNodeScope(jjtn002);
                                      jjtc002 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte002 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte002;
                                    }
                                    if (jjte002 instanceof ParseException) {
                                      throw (ParseException)jjte002;
                                    }
                                    throw (Error)jjte002;
                                  } finally {
                                    if (jjtc002) {
                                      jjtree.closeNodeScope(jjtn002, true);
                                    }
                                  }
/*@egen*/       
    | <IDENTIFIER> "[" Expression() "]" "=" Expression()/*@bgen(jjtree) Assign */
                                                         {
                                                           SimpleNode jjtn003 = new SimpleNode(JJTASSIGN);
                                                           boolean jjtc003 = true;
                                                           jjtree.openNodeScope(jjtn003);
                                                         }
                                                         try {
/*@egen*/ ";"/*@bgen(jjtree)*/
                                                         } finally {
                                                           if (jjtc003) {
                                                             jjtree.closeNodeScope(jjtn003, true);
                                                           }
                                                         }
/*@egen*/        
    | <IDENTIFIER> "=" Expression()/*@bgen(jjtree) Assign */
                                    {
                                      SimpleNode jjtn004 = new SimpleNode(JJTASSIGN);
                                      boolean jjtc004 = true;
                                      jjtree.openNodeScope(jjtn004);
                                    }
                                    try {
/*@egen*/ ";"/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc004) {
                                        jjtree.closeNodeScope(jjtn004, true);
                                      }
                                    }
/*@egen*/        
    | Expression() ";"  
}

void Expression()       : {/* System.out.println("Expression\n"); */}
{
    <INTEGER> [Express()]
    | "true" [Express()]
    | "false" [Express()]
    | <IDENTIFIER> [Express()]
    | "this" [Express()]
    | "new" "int" "[" Expression() "]" [Express()]
    | "new" <IDENTIFIER> "(" ")" [Express()]
    | "!" Expression() [Express()]
    | "(" Expression() ")" [Express()]
}

void Express()       : {/* System.out.println("Express\n"); */}
{
    ( "&&" | "<" | "+" | "-" | "*" | "/" ) Expression() [Express()]
    | "[" Expression() "]" [Express()]
    | "." "length" [Express()] /* OPTIMIZAO CARALHOOOOO  */
    | "." <IDENTIFIER> "(" [ Expression() ( "," Expression() )* ] ")" [Express()]
}