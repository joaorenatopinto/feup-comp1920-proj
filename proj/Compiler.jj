/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Compiler.jj */
/*@egen*/options
{
    LOOKAHEAD=1;
               
}

PARSER_BEGIN(Compiler)

import java.util.*;
import java.io.*;

public class Compiler/*@bgen(jjtree)*/implements CompilerTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCompilerState jjtree = new JJTCompilerState();

/*@egen*/
    static int nErrors;
    static int MAX_ERRORS = 10;

    public static HashMap<String, Integer> symbol_table = new HashMap<String, Integer>();

    public static void main(String args[]) throws ParseException, IOException {
        nErrors = 0;
        System.out.println("Parser for Mini Java grammar");
        System.out.println("Your shitty code's AST:");
        System.setIn(new FileInputStream(new File(args[0])));
        Compiler comp = new Compiler(System.in);
        SimpleNode root = comp.Program(); // returns reference to root node

        root.dump(""); // prints the tree on the screen
    }

    static void reportError(ParseException e, String statement, boolean recover) {
        System.out.println("Syntatic error on " + statement + " statement.\n\n" +  e.toString());
        nErrors++;
      
        if (recover) {
          recoverFromError();
        }
      
        if (nErrors >= MAX_ERRORS) {
          System.out.println("Reached maximum number of errors (" + MAX_ERRORS + "). Terminating.");
          System.exit(1);
        }
      }
    
    static void recoverFromError() {
        Token t;
        Token t2;
        // do {
        //     // t = getToken(1);
        //     // if (t.kind == RPARENTHESIS) {
        //     //     t2 = getToken(1);
        //     //     if (t2.kind == LBRACKET | t2.kind == SEMICOLON) {
        //     //         return;
        //     //     }
        //     // }
        //     // t = getNextToken();

        //     t = getToken(1);
        //     if (t.kind == RPARENTHESIS)
        //         break;
                
        //     System.out.print(t.kind + " ");
        //     t = getNextToken();
        // } while (t.kind != RPARENTHESIS);
        // t = getNextToken();

        t = getToken(1);

        do {

            do {

                System.out.print(t.kind + " ");

                t2 = getToken(1);

                if (t2.kind == LBRACKET)
                    return;
                
                if (t.kind == RPARENTHESIS)
                    break;
                    
                t = getNextToken();

            } while (t.kind != RPARENTHESIS );

            t = getToken(1);

            if (t.kind == RPARENTHESIS)
                t = getNextToken();

        } while (t.kind == RPARENTHESIS);

////////////////////////
        // do {
        //     t = getNextToken();

        // } while (t.kind != SEMICOLON && t != null && t.kind != EOF);
    }
    
}



PARSER_END(Compiler)

SKIP :
{
    " " | "\r" | "\t" | "\n"
    | < "//" (~["\r", "\n"])* >
    | < "/*" > : ML_COMMENT_STATE
}

<ML_COMMENT_STATE> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] >   
}

TOKEN:
{
    < INTEGER: (["0"-"9"])+ >
    | < SEMICOLON: ";" >
    | < IF: "if" >
    | < INT: "int" >
    | < INT_ARRAY: "int" "[" "]" >
    | < NEW: "new" >
    | < VOID: "void" >
    | < ELSE: "else" >
    | < TRUE: "true" >
    | < MAIN: "main" >
    | < THIS: "this" >
    | < WHILE: "while" >
    | < FALSE: "false" >
    | < CLASS: "class" >
    | < PUBLIC: "public" >
    | < STATIC: "static" >
    | < STRING: "String" >
    | < LENGTH: "length" >
    | < RETURN: "return" >
    | < BOOLEAN: "boolean" >
    | < EXTENDS: "extends" >
    | < IMPORT: "import" >
    | <LPARENTHESIS: "(" >
    | <RPARENTHESIS: ")" >
    | <LBRACKET: "{" >
    | <RBRACKET: "}" >
    | < IDENTIFIER: ( (["$"]|["_"]|["A"-"Z"]|["a"-"z"])(["$"]|["0"-"9"]|["A"-"Z"]|["a"-"z"]|["_"])*) >
    
}

SimpleNode Program(): {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    Start()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ { return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    Imports() ClassDeclaration()/*@bgen(jjtree) #File( 2) */
                                 {
                                   ASTFile jjtn001 = new ASTFile(JJTFILE);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*/ <EOF>/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                   }
                                 }
/*@egen*/         /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Imports() : {/*@bgen(jjtree) Imports */
  ASTImports jjtn000 = new ASTImports(JJTIMPORTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Imports */
    try {
/*@egen*/
    ( ImportDeclaration() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ImportDeclaration() : {/*@bgen(jjtree) ImportDeclaration */
  ASTImportDeclaration jjtn000 = new ASTImportDeclaration(JJTIMPORTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImportDeclaration */
    try {
/*@egen*/
    "import" ["static"] <IDENTIFIER> [ "." <IDENTIFIER> "(" [ ( Type() | "void" ) ( "," ( Type() | "void" )  )* ] ")" [ Type() | "void" ] ] ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void ClassDeclaration() : {/*@bgen(jjtree) ClassDeclaration */
                           ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; Token t2;}
{/*@bgen(jjtree) ClassDeclaration */
    try {
/*@egen*/
    "class" t1=<IDENTIFIER> [ "extends" t2=<IDENTIFIER> {jjtn000.ast_ext = t2.image;} ] "{" ( VarDeclaration() )* ( MethodDeclaration() )* "}"/*@bgen(jjtree)*/
                                                                                                                                               {
                                                                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                 jjtc000 = false;
                                                                                                                                               }
/*@egen*/ {jjtn000.ast_id = t1.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarDeclaration() : {/*@bgen(jjtree) VarDeclaration */
                         ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; Token t2;}
{/*@bgen(jjtree) VarDeclaration */
    try {
/*@egen*/
    t2=Type() t1=<IDENTIFIER> ";"/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ {jjtn000.ast_id = t1.image; jjtn000.ast_type = t2.image; System.out.println(jjtn000.ast_type);}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodDeclaration() : {/*@bgen(jjtree) MethodDeclaration */
                            ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}
{/*@bgen(jjtree) MethodDeclaration */
    try {
/*@egen*/  
    "public"  
    (
    Type() t1=<IDENTIFIER> "(" [ MethodArgs() ] ")" "{" ( LOOKAHEAD(2) VarDeclaration() )* ( Statement() )* "return" Cal1() ";" "}"/*@bgen(jjtree)*/
                                                                                                                                    {
                                                                                                                                      jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                      jjtc000 = false;
                                                                                                                                    }
/*@egen*/ {jjtn000.ast_id = t1.image;}
    | "static" "void" "main" "("  "String" "[" "]" <IDENTIFIER> ")" "{" ( LOOKAHEAD(2) VarDeclaration() )* ( Statement() )* "}" 
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void MethodArgs() : {/*@bgen(jjtree) MethodArgs */
  ASTMethodArgs jjtn000 = new ASTMethodArgs(JJTMETHODARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodArgs */
    try {
/*@egen*/
    Type() <IDENTIFIER> ( "," Type() <IDENTIFIER> )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Token Type()      : {Token t1;}
{  
    t1=<BOOLEAN> { return t1; }
    | t1=<INT_ARRAY> { return t1; }
    | t1=<INT> { return t1; }
    | t1=<IDENTIFIER> { return t1; }
}

void Statement() : {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
    try {
/*@egen*/
    "{" ( Statement() )* "}"
    | "if" "(" Cal1() ")"/*@bgen(jjtree) #If( 2) */
                          {
                            ASTIf jjtn001 = new ASTIf(JJTIF);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
                          }
/*@egen*/        "else"/*@bgen(jjtree) #Else( 1) */
                                                    {
                                                      ASTElse jjtn002 = new ASTElse(JJTELSE);
                                                      boolean jjtc002 = true;
                                                      jjtree.openNodeScope(jjtn002);
                                                    }
                                                    try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                                                    } catch (Throwable jjte002) {
                                                      if (jjtc002) {
                                                        jjtree.clearNodeScope(jjtn002);
                                                        jjtc002 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte002 instanceof RuntimeException) {
                                                        throw (RuntimeException)jjte002;
                                                      }
                                                      if (jjte002 instanceof ParseException) {
                                                        throw (ParseException)jjte002;
                                                      }
                                                      throw (Error)jjte002;
                                                    } finally {
                                                      if (jjtc002) {
                                                        jjtree.closeNodeScope(jjtn002,  1);
                                                      }
                                                    }
/*@egen*/         
    | WhileStatement()        
    | LOOKAHEAD(2) <IDENTIFIER> "[" Cal1()/*@bgen(jjtree) #Identifier( 1) */
                                           {
                                             ASTIdentifier jjtn003 = new ASTIdentifier(JJTIDENTIFIER);
                                             boolean jjtc003 = true;
                                             jjtree.openNodeScope(jjtn003);
                                           }
                                           try {
/*@egen*/ "]"/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc003) {
                                               jjtree.closeNodeScope(jjtn003,  1);
                                             }
                                           }
/*@egen*/                "=" Cal1()/*@bgen(jjtree) #Assign( 2) */
                                                                         {
                                                                           ASTAssign jjtn004 = new ASTAssign(JJTASSIGN);
                                                                           boolean jjtc004 = true;
                                                                           jjtree.openNodeScope(jjtn004);
                                                                         }
                                                                         try {
/*@egen*/ ";"/*@bgen(jjtree)*/
                                                                         } finally {
                                                                           if (jjtc004) {
                                                                             jjtree.closeNodeScope(jjtn004,  2);
                                                                           }
                                                                         }
/*@egen*/           
    | LOOKAHEAD(2)/*@bgen(jjtree) Identifier */
                   {
                     ASTIdentifier jjtn005 = new ASTIdentifier(JJTIDENTIFIER);
                     boolean jjtc005 = true;
                     jjtree.openNodeScope(jjtn005);
                   }
                   try {
/*@egen*/ <IDENTIFIER>/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc005) {
                       jjtree.closeNodeScope(jjtn005, true);
                     }
                   }
/*@egen*/             "=" Cal1()/*@bgen(jjtree) #Assign( 2) */
                                                       {
                                                         ASTAssign jjtn006 = new ASTAssign(JJTASSIGN);
                                                         boolean jjtc006 = true;
                                                         jjtree.openNodeScope(jjtn006);
                                                       }
                                                       try {
/*@egen*/ ";"/*@bgen(jjtree)*/
                                                       } finally {
                                                         if (jjtc006) {
                                                           jjtree.closeNodeScope(jjtn006,  2);
                                                         }
                                                       }
/*@egen*/           
    | Cal1() ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/  
}

void WhileStatement() : {/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) WhileStatement */
    try {
/*@egen*/
    <WHILE> <LPARENTHESIS> 
    try {
        Cal1() <RPARENTHESIS>
     } catch (ParseException e) {
       reportError(e, "WHILE", true);
     }
     Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Cal1()      : {} { 
    Cal2()
    (
        LOOKAHEAD(2) "&&"/*@bgen(jjtree) #And( 2) */
                          {
                            ASTAnd jjtn001 = new ASTAnd(JJTAND);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ Cal2()/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
                          }
/*@egen*/        
    )*
}
 
void Cal2()      : {} { 
    Cal3()
    (
        LOOKAHEAD(2) "<"/*@bgen(jjtree) #Less( 2) */
                         {
                           ASTLess jjtn001 = new ASTLess(JJTLESS);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*/ Cal3()/*@bgen(jjtree)*/
                         } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             throw (RuntimeException)jjte001;
                           }
                           if (jjte001 instanceof ParseException) {
                             throw (ParseException)jjte001;
                           }
                           throw (Error)jjte001;
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                           }
                         }
/*@egen*/         
    )*
}


void Cal3()      : {} {
    Cal4() 
    (
        LOOKAHEAD(2) ( 
            "+"/*@bgen(jjtree) #Add( 2) */
                {
                  ASTAdd jjtn001 = new ASTAdd(JJTADD);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ Cal4()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/        
            | "-"/*@bgen(jjtree) #Sub( 2) */
                  {
                    ASTSub jjtn002 = new ASTSub(JJTSUB);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*/ Cal4()/*@bgen(jjtree)*/
                  } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      throw (RuntimeException)jjte002;
                    }
                    if (jjte002 instanceof ParseException) {
                      throw (ParseException)jjte002;
                    }
                    throw (Error)jjte002;
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                    }
                  }
/*@egen*/        
        )
    )*
}

void Cal4()      : {} {
    Cal5()
    (
        LOOKAHEAD(2) ( 
            "*"/*@bgen(jjtree) #Mul( 2) */
                {
                  ASTMul jjtn001 = new ASTMul(JJTMUL);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ Cal5()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/        
            | "/"/*@bgen(jjtree) #Div( 2) */
                  {
                    ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*/ Cal5()/*@bgen(jjtree)*/
                  } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      throw (RuntimeException)jjte002;
                    }
                    if (jjte002 instanceof ParseException) {
                      throw (ParseException)jjte002;
                    }
                    throw (Error)jjte002;
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                    }
                  }
/*@egen*/         
        )
    )*
}


void Cal5()      : {} {
    "(" Cal1() ")"
    | Expression1()
}


void Expression1()       : {}
{/*@bgen(jjtree) Int */
    {
      ASTInt jjtn001 = new ASTInt(JJTINT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    <INTEGER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/      [LOOKAHEAD(2)/*@bgen(jjtree) #GroupCondition( 2) */
                                 {
                                   ASTGroupCondition jjtn002 = new ASTGroupCondition(JJTGROUPCONDITION);
                                   boolean jjtc002 = true;
                                   jjtree.openNodeScope(jjtn002);
                                 }
                                 try {
/*@egen*/ Express1()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte002) {
                                   if (jjtc002) {
                                     jjtree.clearNodeScope(jjtn002);
                                     jjtc002 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte002 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte002;
                                   }
                                   if (jjte002 instanceof ParseException) {
                                     throw (ParseException)jjte002;
                                   }
                                   throw (Error)jjte002;
                                 } finally {
                                   if (jjtc002) {
                                     jjtree.closeNodeScope(jjtn002,  2);
                                   }
                                 }
/*@egen*/                   ]
    |/*@bgen(jjtree) True */
      {
        ASTTrue jjtn003 = new ASTTrue(JJTTRUE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ "true"/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
      }
/*@egen*/       [LOOKAHEAD(2)/*@bgen(jjtree) #GroupCondition( 2) */
                                 {
                                   ASTGroupCondition jjtn004 = new ASTGroupCondition(JJTGROUPCONDITION);
                                   boolean jjtc004 = true;
                                   jjtree.openNodeScope(jjtn004);
                                 }
                                 try {
/*@egen*/ Express1()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte004) {
                                   if (jjtc004) {
                                     jjtree.clearNodeScope(jjtn004);
                                     jjtc004 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte004 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte004;
                                   }
                                   if (jjte004 instanceof ParseException) {
                                     throw (ParseException)jjte004;
                                   }
                                   throw (Error)jjte004;
                                 } finally {
                                   if (jjtc004) {
                                     jjtree.closeNodeScope(jjtn004,  2);
                                   }
                                 }
/*@egen*/                   ]
    |/*@bgen(jjtree) False */
      {
        ASTFalse jjtn005 = new ASTFalse(JJTFALSE);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
      }
      try {
/*@egen*/ "false"/*@bgen(jjtree)*/
      } finally {
        if (jjtc005) {
          jjtree.closeNodeScope(jjtn005, true);
        }
      }
/*@egen*/        [LOOKAHEAD(2)/*@bgen(jjtree) #GroupCondition( 2) */
                                   {
                                     ASTGroupCondition jjtn006 = new ASTGroupCondition(JJTGROUPCONDITION);
                                     boolean jjtc006 = true;
                                     jjtree.openNodeScope(jjtn006);
                                   }
                                   try {
/*@egen*/ Express1()/*@bgen(jjtree)*/
                                   } catch (Throwable jjte006) {
                                     if (jjtc006) {
                                       jjtree.clearNodeScope(jjtn006);
                                       jjtc006 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte006 instanceof RuntimeException) {
                                       throw (RuntimeException)jjte006;
                                     }
                                     if (jjte006 instanceof ParseException) {
                                       throw (ParseException)jjte006;
                                     }
                                     throw (Error)jjte006;
                                   } finally {
                                     if (jjtc006) {
                                       jjtree.closeNodeScope(jjtn006,  2);
                                     }
                                   }
/*@egen*/                   ]
    |/*@bgen(jjtree) Identifier */
      {
        ASTIdentifier jjtn007 = new ASTIdentifier(JJTIDENTIFIER);
        boolean jjtc007 = true;
        jjtree.openNodeScope(jjtn007);
      }
      try {
/*@egen*/ <IDENTIFIER>/*@bgen(jjtree)*/
      } finally {
        if (jjtc007) {
          jjtree.closeNodeScope(jjtn007, true);
        }
      }
/*@egen*/             [LOOKAHEAD(2)/*@bgen(jjtree) #GroupCondition( 2) */
                                             {
                                               ASTGroupCondition jjtn008 = new ASTGroupCondition(JJTGROUPCONDITION);
                                               boolean jjtc008 = true;
                                               jjtree.openNodeScope(jjtn008);
                                             }
                                             try {
/*@egen*/ Express1()/*@bgen(jjtree)*/
                                             } catch (Throwable jjte008) {
                                               if (jjtc008) {
                                                 jjtree.clearNodeScope(jjtn008);
                                                 jjtc008 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte008 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte008;
                                               }
                                               if (jjte008 instanceof ParseException) {
                                                 throw (ParseException)jjte008;
                                               }
                                               throw (Error)jjte008;
                                             } finally {
                                               if (jjtc008) {
                                                 jjtree.closeNodeScope(jjtn008,  2);
                                               }
                                             }
/*@egen*/                   ]
    |/*@bgen(jjtree) This */
      {
        ASTThis jjtn009 = new ASTThis(JJTTHIS);
        boolean jjtc009 = true;
        jjtree.openNodeScope(jjtn009);
      }
      try {
/*@egen*/ "this"/*@bgen(jjtree)*/
      } finally {
        if (jjtc009) {
          jjtree.closeNodeScope(jjtn009, true);
        }
      }
/*@egen*/       [LOOKAHEAD(2)/*@bgen(jjtree) #GroupCondition( 2) */
                                 {
                                   ASTGroupCondition jjtn010 = new ASTGroupCondition(JJTGROUPCONDITION);
                                   boolean jjtc010 = true;
                                   jjtree.openNodeScope(jjtn010);
                                 }
                                 try {
/*@egen*/ Express1()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte010) {
                                   if (jjtc010) {
                                     jjtree.clearNodeScope(jjtn010);
                                     jjtc010 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte010 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte010;
                                   }
                                   if (jjte010 instanceof ParseException) {
                                     throw (ParseException)jjte010;
                                   }
                                   throw (Error)jjte010;
                                 } finally {
                                   if (jjtc010) {
                                     jjtree.closeNodeScope(jjtn010,  2);
                                   }
                                 }
/*@egen*/                   ]
    | "new" (
        "int" "[" Cal1()/*@bgen(jjtree) #Array( 1) */
                         {
                           ASTArray jjtn011 = new ASTArray(JJTARRAY);
                           boolean jjtc011 = true;
                           jjtree.openNodeScope(jjtn011);
                         }
                         try {
/*@egen*/ "]"/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc011) {
                             jjtree.closeNodeScope(jjtn011,  1);
                           }
                         }
/*@egen*/           [LOOKAHEAD(2)/*@bgen(jjtree) #GroupCondition( 2) */
                                                     {
                                                       ASTGroupCondition jjtn012 = new ASTGroupCondition(JJTGROUPCONDITION);
                                                       boolean jjtc012 = true;
                                                       jjtree.openNodeScope(jjtn012);
                                                     }
                                                     try {
/*@egen*/ Express1()/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte012) {
                                                       if (jjtc012) {
                                                         jjtree.clearNodeScope(jjtn012);
                                                         jjtc012 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte012 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte012;
                                                       }
                                                       if (jjte012 instanceof ParseException) {
                                                         throw (ParseException)jjte012;
                                                       }
                                                       throw (Error)jjte012;
                                                     } finally {
                                                       if (jjtc012) {
                                                         jjtree.closeNodeScope(jjtn012,  2);
                                                       }
                                                     }
/*@egen*/                   ]
        | <IDENTIFIER> "("/*@bgen(jjtree) Object */
                           {
                             ASTObject jjtn013 = new ASTObject(JJTOBJECT);
                             boolean jjtc013 = true;
                             jjtree.openNodeScope(jjtn013);
                           }
                           try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc013) {
                               jjtree.closeNodeScope(jjtn013, true);
                             }
                           }
/*@egen*/         [LOOKAHEAD(2)/*@bgen(jjtree) #GroupCondition( 2) */
                                                     {
                                                       ASTGroupCondition jjtn014 = new ASTGroupCondition(JJTGROUPCONDITION);
                                                       boolean jjtc014 = true;
                                                       jjtree.openNodeScope(jjtn014);
                                                     }
                                                     try {
/*@egen*/ Express1()/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte014) {
                                                       if (jjtc014) {
                                                         jjtree.clearNodeScope(jjtn014);
                                                         jjtc014 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte014 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte014;
                                                       }
                                                       if (jjte014 instanceof ParseException) {
                                                         throw (ParseException)jjte014;
                                                       }
                                                       throw (Error)jjte014;
                                                     } finally {
                                                       if (jjtc014) {
                                                         jjtree.closeNodeScope(jjtn014,  2);
                                                       }
                                                     }
/*@egen*/                   ]
    )
    | "!"/*@bgen(jjtree) #Neg( 1) */
          {
            ASTNeg jjtn015 = new ASTNeg(JJTNEG);
            boolean jjtc015 = true;
            jjtree.openNodeScope(jjtn015);
          }
          try {
/*@egen*/ Cal1()/*@bgen(jjtree)*/
          } catch (Throwable jjte015) {
            if (jjtc015) {
              jjtree.clearNodeScope(jjtn015);
              jjtc015 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte015 instanceof RuntimeException) {
              throw (RuntimeException)jjte015;
            }
            if (jjte015 instanceof ParseException) {
              throw (ParseException)jjte015;
            }
            throw (Error)jjte015;
          } finally {
            if (jjtc015) {
              jjtree.closeNodeScope(jjtn015,  1);
            }
          }
/*@egen*/         [LOOKAHEAD(2)/*@bgen(jjtree) #GroupCondition( 2) */
                                       {
                                         ASTGroupCondition jjtn016 = new ASTGroupCondition(JJTGROUPCONDITION);
                                         boolean jjtc016 = true;
                                         jjtree.openNodeScope(jjtn016);
                                       }
                                       try {
/*@egen*/ Express1()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte016) {
                                         if (jjtc016) {
                                           jjtree.clearNodeScope(jjtn016);
                                           jjtc016 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte016 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte016;
                                         }
                                         if (jjte016 instanceof ParseException) {
                                           throw (ParseException)jjte016;
                                         }
                                         throw (Error)jjte016;
                                       } finally {
                                         if (jjtc016) {
                                           jjtree.closeNodeScope(jjtn016,  2);
                                         }
                                       }
/*@egen*/                   ]
}


void Express1()       : {}
{ 
    "[" Cal1()/*@bgen(jjtree) #AcessArray( 1) */
               {
                 ASTAcessArray jjtn001 = new ASTAcessArray(JJTACESSARRAY);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ "]"/*@bgen(jjtree)*/
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  1);
                 }
               }
/*@egen*/                [LOOKAHEAD(2)/*@bgen(jjtree) #GroupCondition( 2) */
                                                {
                                                  ASTGroupCondition jjtn002 = new ASTGroupCondition(JJTGROUPCONDITION);
                                                  boolean jjtc002 = true;
                                                  jjtree.openNodeScope(jjtn002);
                                                }
                                                try {
/*@egen*/ Express1()/*@bgen(jjtree)*/
                                                } catch (Throwable jjte002) {
                                                  if (jjtc002) {
                                                    jjtree.clearNodeScope(jjtn002);
                                                    jjtc002 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte002 instanceof RuntimeException) {
                                                    throw (RuntimeException)jjte002;
                                                  }
                                                  if (jjte002 instanceof ParseException) {
                                                    throw (ParseException)jjte002;
                                                  }
                                                  throw (Error)jjte002;
                                                } finally {
                                                  if (jjtc002) {
                                                    jjtree.closeNodeScope(jjtn002,  2);
                                                  }
                                                }
/*@egen*/                   ]
    | "." (/*@bgen(jjtree) Length */
        {
          ASTLength jjtn003 = new ASTLength(JJTLENGTH);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/
        "length"/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/         [LOOKAHEAD(2)/*@bgen(jjtree) #GroupCondition( 2) */
                                       {
                                         ASTGroupCondition jjtn004 = new ASTGroupCondition(JJTGROUPCONDITION);
                                         boolean jjtc004 = true;
                                         jjtree.openNodeScope(jjtn004);
                                       }
                                       try {
/*@egen*/ Express1()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte004) {
                                         if (jjtc004) {
                                           jjtree.clearNodeScope(jjtn004);
                                           jjtc004 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte004 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte004;
                                         }
                                         if (jjte004 instanceof ParseException) {
                                           throw (ParseException)jjte004;
                                         }
                                         throw (Error)jjte004;
                                       } finally {
                                         if (jjtc004) {
                                           jjtree.closeNodeScope(jjtn004,  2);
                                         }
                                       }
/*@egen*/                   ]
        | AcessMethod() [LOOKAHEAD(2)/*@bgen(jjtree) #GroupCondition( 2) */
                                      {
                                        ASTGroupCondition jjtn005 = new ASTGroupCondition(JJTGROUPCONDITION);
                                        boolean jjtc005 = true;
                                        jjtree.openNodeScope(jjtn005);
                                      }
                                      try {
/*@egen*/ Express1()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte005) {
                                        if (jjtc005) {
                                          jjtree.clearNodeScope(jjtn005);
                                          jjtc005 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte005 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte005;
                                        }
                                        if (jjte005 instanceof ParseException) {
                                          throw (ParseException)jjte005;
                                        }
                                        throw (Error)jjte005;
                                      } finally {
                                        if (jjtc005) {
                                          jjtree.closeNodeScope(jjtn005,  2);
                                        }
                                      }
/*@egen*/                   ]
    )
}


void AcessMethod() : {/*@bgen(jjtree) AcessMethod */
  ASTAcessMethod jjtn000 = new ASTAcessMethod(JJTACESSMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AcessMethod */
    try {
/*@egen*/
    <IDENTIFIER> "(" [ Arguments() ] ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void Arguments() : {/*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Arguments */
    try {
/*@egen*/
    Cal1() ("," Cal1())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
